[{"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\index.tsx":"1","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\App.tsx":"2","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx":"3","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx":"4","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx":"5","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\StudentsPage.tsx":"6","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx":"7","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminEditUserPage.tsx":"8"},{"size":437,"mtime":1688470862289,"results":"9","hashOfConfig":"10"},{"size":5418,"mtime":1689271416915,"results":"11","hashOfConfig":"10"},{"size":18687,"mtime":1689274949876,"results":"12","hashOfConfig":"10"},{"size":16729,"mtime":1689271416916,"results":"13","hashOfConfig":"10"},{"size":2509,"mtime":1688507574813,"results":"14","hashOfConfig":"10"},{"size":3349,"mtime":1689094778720,"results":"15","hashOfConfig":"10"},{"size":5012,"mtime":1689094778711,"results":"16","hashOfConfig":"10"},{"size":24512,"mtime":1689273922965,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16kuh62",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":3,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":3,"source":"46"},"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\index.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\App.tsx",["47","48"],[],"import { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AnimatePresence, motion } from 'framer-motion';\r\nimport AdminPage from './pages/AdminPage';\r\nimport UserPage from './pages/UserPage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport HomePage from './pages/HomePage';\r\nimport StudentsPage from './pages/StudentsPage';\r\nimport AdminEditUserPage from './pages/AdminEditUserPage';\r\nimport logo from './images/logo.png';\r\nimport logo_min from './images/logo_min.png';\r\n\r\nconst App: React.FC = () => {\r\n  const [isLoggedInAdmin, setIsLoggedInAdmin] = useState(false);\r\n  const [isLoggedInUser, setIsLoggedInUser] = useState(false);\r\n  const [id, setId] = useState<number | null>(null);\r\n  // const navigate = useNavigate();\r\n  \r\n\r\n  useEffect(() => {\r\n    const adminToken = localStorage.getItem('adminToken');\r\n    const userToken = localStorage.getItem('userToken');\r\n    if (adminToken) {\r\n      setIsLoggedInAdmin(true);\r\n    }\r\n    if (userToken) {\r\n      setIsLoggedInUser(true);\r\n      const userId = localStorage.getItem('userId');\r\n      if (userId) {\r\n        setId(Number(userId));\r\n      }\r\n    }\r\n  }, []);\r\n\r\n\r\n  const handleLogin = (type: boolean, id: number) => {\r\n    setId(id);\r\n    if (type){\r\n      setIsLoggedInAdmin(true);\r\n      localStorage.setItem('adminToken', 'your token');\r\n    } else{\r\n      setIsLoggedInUser(true);\r\n      localStorage.setItem('userToken', 'your token');\r\n      localStorage.setItem('userId', id.toString());\r\n    }\r\n  };\r\n\r\n\r\n  const handleLogout = () => {\r\n    setIsLoggedInAdmin(false);\r\n    setIsLoggedInUser(false);\r\n    setId(null);\r\n    // navigate('/');\r\n    localStorage.removeItem('adminToken');\r\n    localStorage.removeItem('userToken');\r\n    localStorage.removeItem('userId');\r\n  };\r\n\r\n\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const navVariants = {\r\n    open: { opacity: 1, x: 0 },\r\n    closed: { opacity: '50%', x: \"-90%\" },\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Router>\r\n      <div onMouseEnter={() => setIsHovered(true)} onMouseLeave={() => setIsHovered(false)}>\r\n        \r\n        <motion.div \r\n          style={{position: 'fixed', maxWidth: '15%', background: '#1f2932', height: '100%', zIndex: '9999'}}\r\n          initial=\"closed\"\r\n          animate={isHovered ? \"open\" : \"closed\"}\r\n          variants={navVariants}\r\n          transition={{ duration: 0.8 }}\r\n        >\r\n          <div style={{height: '100px'}}>\r\n          {isHovered ? (\r\n            <Link to=\"/\" style={{ color: '#fff', textDecoration: 'none' }}><motion.img \r\n            key=\"open\"\r\n            src={logo} \r\n            alt=\"Лого\" \r\n            style={{width: '100%', margin: '16px' }}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n          /></Link>\r\n          \r\n          ) : (\r\n            <motion.img \r\n              key=\"closed\"\r\n              src={logo_min} \r\n              alt=\"Лого\" \r\n              style={{width: '20%', margin: '16px 16px 16px 90%' }}\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              exit={{ opacity: 0 }}\r\n            />\r\n          )}\r\n          </div>\r\n          \r\n\r\n\r\n        <Link to=\"/\" style={{ color: '#fff', textDecoration: 'none' }}>Главная Страница</Link> <br/>\r\n        <Link to=\"/students\" style={{ color: '#fff', textDecoration: 'none' }}>Список студентов</Link><br/>\r\n        \r\n        {!isLoggedInAdmin && !isLoggedInUser && (\r\n          <div>\r\n            <Link to=\"/login\" style={{ color: '#fff', textDecoration: 'none' }}>Войти в аккаунт</Link>\r\n          </div>\r\n        )}\r\n        {isLoggedInAdmin && (\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <Link to=\"/admin\" style={{ color: '#fff', textDecoration: 'none' }}>Админ-панель</Link> <div style={{ color: '#fff', textDecoration: 'none' }}> | </div>\r\n            <div onClick={() => handleLogout()} style={{ color: '#fff', textDecoration: 'none', cursor: 'pointer' }}>Выйти</div>\r\n          </div>\r\n        )}\r\n        {isLoggedInUser && id && (\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <Link to=\"/user\" style={{ color: '#fff', textDecoration: 'none' }}>Личный кабинет</Link> <div style={{ color: '#fff', textDecoration: 'none' }}> | </div>\r\n            <div onClick={() => handleLogout()} style={{ color: '#fff', textDecoration: 'none', cursor: 'pointer' }}>Выйти</div>\r\n          </div>\r\n        )}\r\n\r\n\r\n        </motion.div>\r\n      </div>\r\n      \r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"/students\" element={<StudentsPage />} />\r\n        <Route path=\"/login\" element={<LoginPage onLogin={handleLogin} />} />\r\n        {isLoggedInAdmin &&            (\r\n          <>\r\n            <Route path=\"/admin\" element={<AdminPage onLogout={handleLogout} />} />\r\n            <Route path=\"/admins/users/:idStudent/:idUser\" element={<AdminEditUserPage />} />\r\n          </>\r\n          \r\n          \r\n        )}\r\n        {isLoggedInUser && id && (\r\n          <Route path=\"/user\" element={<UserPage idUser={id} onLogout={handleLogout} />} />\r\n        )}\r\n      </Routes>\r\n\r\n\r\n    </Router>\r\n    \r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx",["49","50","51","52","53","54"],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx",["55","56","57","58","59","60","61","62","63"],[],"import React, { useState, useEffect, FormEvent } from 'react';\r\nimport './UserPage.css';\r\nimport './AdminEditUserPage.css';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Avatar, Button, Card, Divider, Form, Input, Select, Typography } from 'antd';\r\n\r\ntype AddResidenceFormProps = {\r\n  onAddResidence: (residenceData: Residence) => void;\r\n  idStudent2: number;\r\n  idUser2: number;\r\n};\r\n\r\n// const [idStudent2, setIdStudent2] = useState(0);\r\n// const [idUser2, setIdUser2] = useState(0);\r\n\r\nconst AddResidenceForm = ({ onAddResidence, idStudent2, idUser2 }: AddResidenceFormProps) => {\r\n  // const { idStudent, idUser } = useParams();\r\n  const [students, setStudents] = useState<Student[]>([]);\r\n  const [rooms, setRooms] = useState<Rooms[]>([]);\r\n  const [studentId, setStudentId] = useState(0);\r\n  const [roomId, setRoomId] = useState(0);\r\n  const [moveInDate, setMoveInDate] = useState('');\r\n  const [moveOutDate, setMoveOutDate] = useState('');\r\n  // console.log(idStudent, idUser)\r\n  useEffect(() => {\r\n      const fetchStudents = async () => {\r\n          try {\r\n              const response = await axios.get('/api/data/ollStudent/');\r\n              setStudents(response.data);\r\n              console.log(response.data);\r\n          } catch (error) {\r\n              console.error(error);\r\n          }\r\n      };\r\n      fetchStudents();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n      const fetchRooms = async () => {\r\n          try {\r\n              const response = await axios.get('/api/data/Rooms/');\r\n              setRooms(response.data);\r\n          } catch (error) {\r\n              console.error(error);\r\n          }\r\n      };\r\n      fetchRooms();\r\n  }, []);\r\n\r\n  const handleSubmit = (event: FormEvent) => {\r\n      event.preventDefault();\r\n      onAddResidence({\r\n          residence_id: 0,\r\n          student_id: Number(idStudent2),\r\n          room_id: roomId,\r\n          move_in_date: moveInDate,\r\n          move_out_date: moveOutDate,\r\n          payment: false\r\n      });\r\n      setStudentId(0);\r\n      setRoomId(0);\r\n      setMoveInDate('');\r\n      setMoveOutDate('');\r\n  };\r\n\r\n  return (\r\n      <form onSubmit={handleSubmit}>\r\n          <div>\r\n              <label htmlFor=\"student-id\">id пользователя:{idUser2};id студента:{idStudent2}</label>\r\n          </div>\r\n          <div>\r\n              <label htmlFor=\"room-id\">Номер комнаты:</label>\r\n              <select\r\n                  id=\"room-id\"\r\n                  value={roomId}\r\n                  onChange={(event) =>\r\n                      setRoomId(Number(event.target.value))\r\n                  }\r\n              >\r\n                  <option value={0}>Выберите комнату</option>\r\n                  {rooms.map((room) => (\r\n                      <option key={room.room_id} value={room.room_id}>\r\n                          {room.room_number}\r\n                      </option>\r\n                  ))}\r\n              </select>\r\n          </div>\r\n          <div>\r\n              <label htmlFor=\"move-in-date\">Дата заселения:</label>\r\n              <input\r\n                  id=\"move-in-date\"\r\n                  type=\"date\"\r\n                  value={moveInDate}\r\n                  onChange={(event) => setMoveInDate(event.target.value)}\r\n              />\r\n          </div>\r\n          <div>\r\n              <label htmlFor=\"move-out-date\">Дата выселения:</label>\r\n              <input\r\n                  id=\"move-out-date\"\r\n                  type=\"date\"\r\n                  value={moveOutDate}\r\n                  onChange={(event) => setMoveOutDate(event.target.value)}\r\n              />\r\n          </div>\r\n          <button type=\"submit\">Добавить информацию о проживании</button>\r\n      </form>\r\n  );\r\n};\r\n\r\n\r\ntype User = {\r\n  student_id: number;\r\n  user_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  birth_date: string;\r\n  gender: string;\r\n  country_name: string;\r\n  country_id: number;\r\n  phone: string;\r\n  username: string;\r\n  password:string;\r\n  email: string;\r\n  avatar: string;\r\n};\r\n\r\ntype Countries = {\r\n  country_id: number;\r\n  country_name: string;\r\n};\r\n\r\ntype UserResidenceInfo = {\r\n  residence_id: number;\r\n  user_id: number;\r\n  student_id: number;\r\n  username: string;\r\n  password: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  room_number: number;\r\n  move_in_date: string;\r\n  move_out_date: string;\r\n  total_cost: number;\r\n  payment: boolean;\r\n}\r\n\r\ntype Rooms = {\r\n  room_id: number;\r\n  floor: number;\r\n  room_number: number;\r\n  cost: number;\r\n}\r\n\r\ntype Residence = {\r\n  residence_id: number;\r\n  student_id: number;\r\n  room_id: number;\r\n  move_in_date: string;\r\n  move_out_date: string;\r\n  payment: boolean;\r\n  }\r\n\r\ntype Student = {\r\n  student_id: number;\r\n  user_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  username: string;\r\n};\r\n\r\n\r\n\r\ninterface UserPageProps {\r\n  idUser: number;\r\n  onLogout: () => void;\r\n}\r\n\r\n\r\nconst UserPage: React.FC<UserPageProps> = ({ idUser, onLogout }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [countries, setCountries] = useState<Countries[]>([]);\r\n    const [userResidenceInfo, setUserResidenceInfo] = useState<UserResidenceInfo[]>([]);\r\n    const [rooms, setRooms] = useState<Rooms[]>([]);\r\n\r\n    useEffect(() => {\r\n        let countriesData: Countries[] = [];\r\n        let userData: User | null = null;\r\n\r\n        async function fetchData1() {\r\n            const response = await axios.get('/api/countries/');\r\n            setCountries(response.data);\r\n            countriesData = response.data;\r\n        }\r\n\r\n        async function fetchData2() {\r\n            const response = await axios.get(`/api/users/get/${idUser}`);\r\n            setUser(response.data);\r\n            userData = response.data;\r\n        }\r\n\r\n        Promise.all([fetchData1(), fetchData2()]).then(() => {\r\n            setUser((prevUser) => ({ ...prevUser!, ['country_id']: countriesData.find(country => country.country_name === userData?.country_name)?.country_id || 0 }));\r\n        });\r\n\r\n        axios.get('/api/data/UserResidenceInfo/')\r\n            .then(response => {\r\n                setUserResidenceInfo(response.data);\r\n            });\r\n        axios.get('/api/data/Rooms/')\r\n            .then(response => {\r\n                setRooms(response.data);\r\n            });\r\n    }, [idUser]);\r\n\r\n    const handleEdit = () => { \r\n        setEditMode(true); \r\n    };\r\n\r\n    const handleSave = () => { \r\n        console.log(user);\r\n        axios.post(`/api/users/`, user, { \r\n            headers: { 'Content-Type': 'application/json', }, \r\n        }); \r\n        setEditMode(false); \r\n    };\r\n\r\n    const handleCancel = () => { \r\n        setEditMode(false); \r\n        let userData: User | null = null;\r\n\r\n        async function fetchData2() {\r\n            const response = await axios.get(`/api/users/get/${idUser}`);\r\n            setUser(response.data);\r\n            // setIdStudent2(response.data.student_id)\r\n            // setIdUser2(response.data.user_id)\r\n            userData = response.data;\r\n        }\r\n\r\n        Promise.all([fetchData2()]).then(() => {\r\n            setUser((prevUser) => ({ ...prevUser!, ['country_id']: countries.find(country => country.country_name === userData?.country_name)?.country_id || 0 }));\r\n        });\r\n    };\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n\r\n        setUser((prevUser) => ({ ...prevUser!, [name]: value }));\r\n    };\r\n    \r\n    // const handleSelectChange1 = (value:{ value: number, label: string }, name: string) => {\r\n    //   setUser((prevUser) => ({ ...prevUser!, [name]: value.value }));\r\n    // };\r\n    \r\n    const handleSelectChange1 = (country_id: number, name: string) => {\r\n        console.log(country_id);\r\n        setUser((prevUser) => ({ ...prevUser!, [name]: country_id }));\r\n        const country = countries.find(country => country.country_id === country_id);\r\n        if (country) {\r\n            setUser((prevUser) => ({ ...prevUser!, ['country_name']: country.country_name}));\r\n        }\r\n    };\r\n    \r\n    const handleSelectChange2 = (value: string, name: string) => {\r\n        setUser((prevUser) => ({ ...prevUser!, [name]: value }));\r\n    };\r\n\r\n    const handleAddSelectResidence = async (residenceData: Residence) => {\r\n        try {\r\n            const response = await axios.post('/api/data/addResidence/', residenceData);\r\n            console.log(residenceData);\r\n            window.location.reload();\r\n            // Обновляем состояние с новой информацией о проживании\r\n            setUserResidenceInfo([...userResidenceInfo, response.data]);\r\n        } catch (error: any) {\r\n            console.error(error);\r\n            alert('Ошибка при добавлении проживания: ' + error.response.data.message.split('\\n')[0]);\r\n        }\r\n    };\r\n\r\n    const handleDeleteSelectResidence = (residence_id: number) => {\r\n        axios.post('/api/data/deleteResidence/' + residence_id)\r\n            .then(response => {\r\n                console.log(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n            setUserResidenceInfo(prevResidenceInfo => prevResidenceInfo.filter(item => item.residence_id !== residence_id));\r\n    };\r\n\r\n    if (!user) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className=\"profile\">\r\n                    <><div className=\"user-avatar\">\r\n                            <Avatar size={128} src={user.avatar} />\r\n                        </div></>\r\n                    <><Typography.Title level={3}>\r\n                                {user.first_name} {user.last_name}\r\n                            </Typography.Title></>\r\n                    <><Typography.Paragraph>\r\n                                Дата рождения: {user.birth_date}<br />\r\n                                Пол: {user.gender}<br />\r\n                                Страна проживания: {user.country_name}<br />\r\n                                Телефонный номер: {user.phone}<br />\r\n                                Логин/Имя пользователя :{user.username}<br />\r\n                                Пароль :{user.password}<br />\r\n                                Электронная почта: {user.email}<br />\r\n                            </Typography.Paragraph>\r\n\r\n                            \r\n                            </>\r\n                    <>{!editMode && (\r\n                                <div>\r\n                                    <Button type=\"primary\" onClick={handleEdit}>\r\n                                        Редактировать\r\n                                    </Button>\r\n                                </div>\r\n                            )}</>\r\n                </div>\r\n                <div className=\"residenceDiv\">\r\n                    <div className=\"residenceForm\">\r\n                        <AddResidenceForm onAddResidence={handleAddSelectResidence} idStudent2={user.student_id} idUser2={idUser}/>\r\n                    </div>\r\n                    <div>{userResidenceInfo && userResidenceInfo.filter(info => info.user_id === idUser).map(info => (\r\n                            <div  key={info.room_number}>\r\n                                <div className=\"residenceTitle\">\r\n                                    <div >\r\n                                        <Typography.Title level={4}>Информация о проживании</Typography.Title>\r\n                                        <Typography.Paragraph >\r\n                                            {/* Номер student_id: {info.student_id}<br /> */}\r\n                                            Номер комнаты: {info.room_number}<br />\r\n                                            Дата заселения: {info.move_in_date}<br />\r\n                                            Дата выселения: {info.move_out_date}<br />\r\n                                            Общая стоимость: {info.total_cost}<br />\r\n                                        </Typography.Paragraph>\r\n                                        <div className=\"checkbox-wrapper-10\">\r\n                                            <input className=\"tgl tgl-flip\" id=\"cb5\" type=\"checkbox\" checked={info.payment} disabled/>\r\n                                            <label className=\"tgl-btn\" data-tg-off=\"Плоти-налог\" data-tg-on=\"Уплочно!\" htmlFor=\"cb5\"></label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Button onClick={() => handleDeleteSelectResidence(info.residence_id)}>Удалить информацию о проживании</Button>\r\n                                </div>\r\n                            </div>\r\n                        ))}</div>\r\n                </div>\r\n\r\n                <>\r\n                {editMode && (\r\n                        <div className='editModeDiv'>\r\n                            <div className='editMode'>\r\n                                <Form layout=\"vertical\">\r\n                                    <Form.Item label=\"Имя\">\r\n                                        <Input name=\"first_name\" value={user.first_name} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Фамилия\">\r\n                                        <Input name=\"last_name\" value={user.last_name} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Дата рождения\">\r\n                                        <Input name=\"birth_date\" value={user.birth_date} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Пол\">\r\n                                        <Select defaultValue={user.gender} onChange={(value) => handleSelectChange2(value, 'gender')}>\r\n                                            <Select.Option value=\"Мужской\">Мужской</Select.Option>\r\n                                            <Select.Option value=\"Женский\">Женский</Select.Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Страна проживания\">\r\n                                        <Select defaultValue={user.country_id} onChange={(value) => handleSelectChange1(value, 'country_id')}>\r\n                                            {countries.map(country => (\r\n                                                <Select.Option key={country.country_id} value={country.country_id}>{country.country_name}</Select.Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Телефонный номер\">\r\n                                        <Input name=\"phone\" value={user.phone} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Логин/Имя пользователя\">\r\n                                        <Input name=\"username\" value={user.username} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Пароль\">\r\n                                        <Input.Password name=\"password\" value={user.password} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Электронная почта\">\r\n                                        <Input name=\"email\" value={user.email} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                </Form>\r\n                                <Button type=\"primary\" onClick={handleSave}>\r\n                                    Сохранить\r\n                                </Button>{' '}\r\n                                <Button onClick={handleCancel}>Отмена</Button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </>\r\n\r\n            </div>\r\n            \r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserPage;\r\n\r\n\r\n","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\StudentsPage.tsx",["64","65"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport './StudentsPage.css';\r\n\r\n\r\ntype Student = {\r\n  student_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  birth_date: string;\r\n  gender: string;\r\n  country_name: number;\r\n  // phone: string;\r\n  // email: string;\r\n};\r\n\r\ntype SortConfig = {\r\n  key: keyof Student;\r\n  direction: 'ascending' | 'descending';\r\n};\r\n\r\nconst StudentsPage: React.FC = () => {\r\n  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'first_name', direction: 'ascending' });\r\n  const [rows, setRows] = useState<Student[]>([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/data/')\r\n      .then(response => {\r\n        setRows(response.data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const sortArray = (type: keyof Student) => {\r\n      const sorted = [...rows].sort((a, b) => {\r\n        if (typeof a[type] === 'number' && typeof b[type] === 'number') {\r\n          return (a[type] as number) - (b[type] as number);\r\n        }\r\n        if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n          return (a[type] as string).localeCompare(b[type] as string);\r\n        }\r\n        return 0;\r\n      });\r\n      if (sortConfig.direction === 'descending') sorted.reverse();\r\n      return sorted;\r\n    };\r\n    \r\n\r\n    if (sortConfig.key) {\r\n      const sortedData = sortArray(sortConfig.key);\r\n      setRows(sortedData);\r\n    }\r\n  }, [sortConfig]);\r\n\r\n  const requestSort = (key: keyof Student) => {\r\n    let direction: 'ascending' | 'descending' = 'ascending';\r\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <div className=\"Login-div\">\r\n        <Link to=\"/login\" className=\"login-button\">Войти</Link>\r\n      </div> */}\r\n      <div className=\"students-page\">\r\n        <h1 className=\"students-page__title\">Добро пожаловать на главную страницу</h1>\r\n        <p className=\"students-page__info\">\r\n          Жители этого общажного ада.\r\n        </p>\r\n        <table>\r\n          <thead>\r\n          <tr>\r\n            <th onClick={() => requestSort('first_name')}>Имя</th>\r\n            <th onClick={() => requestSort('last_name')}>Фамилия</th>\r\n            <th onClick={() => requestSort('birth_date')}>День рождения</th>\r\n            {/* <th onClick={() => requestSort('email')}>Email</th> */}\r\n            <th onClick={() => requestSort('gender')}>Пол</th>\r\n            <th onClick={() => requestSort('country_name')}>Страна</th>\r\n            {/* <th onClick={() => requestSort('phone')}>Phone</th> */}\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows.map((row, index) => (\r\n              <tr key={index}>\r\n                <td>{row.first_name}</td>\r\n                <td>{row.last_name}</td>\r\n                <td>{row.birth_date}</td>\r\n                {/* <td>{row.email}</td> */}\r\n                <td>{row.gender}</td>\r\n                <td>{row.country_name}</td>\r\n                {/* <td>{row.phone}</td> */}\r\n\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentsPage;","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx",["66"],[],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './NewsFeed.css';\r\nimport HollImage from '../images/Holl.jpg';\r\nimport UpMoneyImage from '../images/UpMoney.jpg';\r\nimport ProgrammingCourseImage from '../images/ProgrammingCourseImage.jpg';\r\nimport SportsComplexImage from '../images/SportsComplexImage.jpg';\r\nimport CreativeFestivalImage from '../images/CreativeFestivalImage.jpg';\r\nimport InternshipOpportunitiesImage from '../images/InternshipOpportunitiesImage.jpg';\r\nimport ScientificResearchExhibitionImage from '../images/ScientificResearchExhibitionImage.jpg';\r\nimport OnlineCoursesImage from '../images/OnlineCoursesImage.jpg';\r\nconst newsData = [\r\n  {\r\n    id: 1,\r\n    title: 'Рим не сразу строился',\r\n    description: 'Важная новость для студентов! Общежитие, в котором проживают многие студенты, наконец-то претерпит капитальный ремонт.',\r\n    image: HollImage,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Чудеса случаются',\r\n    description: 'В рамках нового образовательного проекта, правительство объявило о значительном увеличении стипендий для студентов.',\r\n    image: UpMoneyImage,\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Новый курс по программированию',\r\n    description: 'Университет запускает новый курс по программированию, который позволит студентам освоить современные языки программирования и получить востребованные навыки для работы в IT-индустрии.',\r\n    image: ProgrammingCourseImage,\r\n  },\r\n  {\r\n    id: 4,\r\n    title: 'Открытие нового спортивного комплекса',\r\n    description: 'Университет открывает новый спортивный комплекс, оснащенный современным оборудованием. Студенты смогут заниматься спортом и поддерживать свое физическое здоровье в комфортных условиях.',\r\n    image: SportsComplexImage,\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Студенческий фестиваль творчества',\r\n    description: 'В университете пройдет студенческий фестиваль творчества, где студенты смогут показать свои таланты в различных областях: музыке, танцах, живописи и многое другое.',\r\n    image: CreativeFestivalImage,\r\n  },\r\n  {\r\n    id: 6,\r\n    title: 'Новые возможности для стажировок',\r\n    description: 'Университет заключил партнерство с ведущими компаниями, что открывает новые возможности для студентов по прохождению стажировок и получению практического опыта в своей области.',\r\n    image: InternshipOpportunitiesImage,\r\n  },\r\n  {\r\n    id: 7,\r\n    title: 'Выставка научных исследований',\r\n    description: 'В университете пройдет выставка научных исследований, где студенты смогут представить свои проекты и открытия в различных научных областях.',\r\n    image: ScientificResearchExhibitionImage,\r\n  },\r\n  {\r\n    id: 8,\r\n    title: 'Запуск онлайн-курсов для самообразования',\r\n    description: 'Университет запускает серию онлайн-курсов, которые позволят студентам самостоятельно изучать различные предметы и развивать свои навыки.',\r\n    image: OnlineCoursesImage,\r\n  },\r\n  // Добавьте другие новости в массив newsData\r\n];\r\n\r\n\r\nconst HomePage: React.FC = () => {\r\n    return (\r\n    <div\r\n        style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            // height у //',vh100 ':становите высоту по вашему усмотрению\r\n    }}>\r\n      <div className=\"news-feed\">\r\n      <h1>Новости</h1>\r\n      {newsData.map((news) => (\r\n        <div key={news.id} className=\"news-item\">\r\n          <img src={news.image} alt={news.title} />\r\n          <div className=\"news-content\">\r\n            <h2>{news.title}</h2>\r\n            <p>{news.description}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    <div>\r\n\r\n    </div>\r\n    </div>\r\n    \r\n    );\r\n    \r\n};\r\n\r\nexport default HomePage;","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminEditUserPage.tsx",["67","68","69","70","71","72","73","74","75"],[],"import React, { useState, useEffect, FormEvent } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Avatar, Button, Card, Divider, Form, Input, Select, Typography } from 'antd';\r\nimport './AdminEditUserPage.css';\r\n// import { useState } from 'react';\r\n\r\ntype AddResidenceFormProps = {\r\n    onAddResidence: (residenceData: Residence) => void;\r\n};\r\n\r\n\r\n\r\nconst AddResidenceForm = ({ onAddResidence }: AddResidenceFormProps) => {\r\n    const { idStudent, idUser } = useParams();\r\n    const [students, setStudents] = useState<Student[]>([]);\r\n    const [rooms, setRooms] = useState<Rooms[]>([]);\r\n    const [studentId, setStudentId] = useState(0);\r\n    const [roomId, setRoomId] = useState(0);\r\n    const [moveInDate, setMoveInDate] = useState('');\r\n    const [moveOutDate, setMoveOutDate] = useState('');\r\n    // console.log(idStudent, idUser)\r\n    useEffect(() => {\r\n        const fetchStudents = async () => {\r\n            try {\r\n                const response = await axios.get('/api/data/ollStudent/');\r\n                setStudents(response.data);\r\n                // console.log(response.data);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n        fetchStudents();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchRooms = async () => {\r\n            try {\r\n                const response = await axios.get('/api/data/Rooms/');\r\n                setRooms(response.data);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n        fetchRooms();\r\n    }, []);\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        onAddResidence({\r\n            residence_id: 0,\r\n            student_id: Number(idStudent),\r\n            room_id: roomId,\r\n            move_in_date: moveInDate,\r\n            move_out_date: moveOutDate,\r\n            payment: false\r\n        });\r\n        setStudentId(0);\r\n        setRoomId(0);\r\n        setMoveInDate('');\r\n        setMoveOutDate('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <label htmlFor=\"student-id\">idUser{idUser}idStudent{idStudent}</label>\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"room-id\">Номер комнаты:</label>\r\n                <select\r\n                    id=\"room-id\"\r\n                    value={roomId}\r\n                    onChange={(event) =>\r\n                        setRoomId(Number(event.target.value))\r\n                    }\r\n                >\r\n                    <option value={0}>Выберите комнату</option>\r\n                    {rooms.map((room) => (\r\n                        <option key={room.room_id} value={room.room_id}>\r\n                            {room.room_number}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"move-in-date\">Дата заселения:</label>\r\n                <input\r\n                    id=\"move-in-date\"\r\n                    type=\"date\"\r\n                    value={moveInDate}\r\n                    onChange={(event) => setMoveInDate(event.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"move-out-date\">Дата выселения:</label>\r\n                <input\r\n                    id=\"move-out-date\"\r\n                    type=\"date\"\r\n                    value={moveOutDate}\r\n                    onChange={(event) => setMoveOutDate(event.target.value)}\r\n                />\r\n            </div>\r\n            <button type=\"submit\">Добавить информацию о проживании</button>\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\ntype User = {\r\n    student_id: number;\r\n    first_name: string;\r\n    last_name: string;\r\n    birth_date: string;\r\n    gender: string;\r\n    country_name: string;\r\n    country_id: number;\r\n    phone: string;\r\n    username: string;\r\n    password:string;\r\n    email: string;\r\n    avatar: string;\r\n};\r\n\r\ntype Countries = {\r\n    country_id: number;\r\n    country_name: string;\r\n};\r\n\r\ntype UserResidenceInfo = {\r\n    residence_id: number;\r\n    user_id: number;\r\n    student_id: number;\r\n    username: string;\r\n    password: string;\r\n    first_name: string;\r\n    last_name: string;\r\n    room_number: number;\r\n    move_in_date: string;\r\n    move_out_date: string;\r\n    total_cost: number;\r\n    payment: boolean;\r\n}\r\n\r\ntype Rooms = {\r\n    room_id: number;\r\n    floor: number;\r\n    room_number: number;\r\n    cost: number;\r\n}\r\n\r\ntype Residence = {\r\n    residence_id: number;\r\n    payment: boolean\r\n    student_id: number;\r\n    room_id: number;\r\n    move_in_date: string;\r\n    move_out_date: string;\r\n    }\r\n\r\ntype Student = {\r\n    student_id: number;\r\n    user_id: number;\r\n    first_name: string;\r\n    last_name: string;\r\n    username: string;\r\n};\r\n\r\n\r\nconst AdminEditUserPage: React.FC = () => {\r\n    const { idStudent, idUser } = useParams();\r\n    const [user, setUser] = useState<User | null>(null);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [countries, setCountries] = useState<Countries[]>([]);\r\n    const [userResidenceInfo, setUserResidenceInfo] = useState<UserResidenceInfo[]>([]);\r\n    const [rooms, setRooms] = useState<Rooms[]>([]);\r\n\r\n    useEffect(() => {\r\n        let countriesData: Countries[] = [];\r\n        let userData: User | null = null;\r\n\r\n        async function fetchData1() {\r\n            const response = await axios.get('/api/countries/');\r\n            setCountries(response.data);\r\n            countriesData = response.data;\r\n        }\r\n\r\n        async function fetchData2() {\r\n            const response = await axios.get(`/api/users/get/${idUser}`);\r\n            setUser(response.data);\r\n            userData = response.data;\r\n        }\r\n\r\n        Promise.all([fetchData1(), fetchData2()]).then(() => {\r\n            setUser((prevUser) => ({ ...prevUser!, ['country_id']: countriesData.find(country => country.country_name === userData?.country_name)?.country_id || 0 }));\r\n        });\r\n\r\n        axios.get('/api/data/UserResidenceInfo/')\r\n            .then(response => {\r\n                setUserResidenceInfo(response.data);\r\n            });\r\n        axios.get('/api/data/Rooms/')\r\n            .then(response => {\r\n                setRooms(response.data);\r\n            });\r\n    }, [idUser]);\r\n\r\n    const handleEdit = () => { \r\n        setEditMode(true); \r\n    };\r\n\r\n    const handleSave = () => { \r\n        console.log(user);\r\n        axios.post(`/api/users/`, user, { \r\n            headers: { 'Content-Type': 'application/json', }, \r\n        }); \r\n        setEditMode(false); \r\n    };\r\n\r\n    const handleCancel = () => { \r\n        setEditMode(false); \r\n        let userData: User | null = null;\r\n\r\n        async function fetchData2() {\r\n            const response = await axios.get(`/api/users/get/${idUser}`);\r\n            setUser(response.data);\r\n            userData = response.data;\r\n        }\r\n\r\n        Promise.all([fetchData2()]).then(() => {\r\n            setUser((prevUser) => ({ ...prevUser!, ['country_id']: countries.find(country => country.country_name === userData?.country_name)?.country_id || 0 }));\r\n        });\r\n    };\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n\r\n        setUser((prevUser) => ({ ...prevUser!, [name]: value }));\r\n    };\r\n    \r\n    // const handleSelectChange1 = (value:{ value: number, label: string }, name: string) => {\r\n    //   setUser((prevUser) => ({ ...prevUser!, [name]: value.value }));\r\n    // };\r\n    \r\n    const handleSelectChange1 = (country_id: number, name: string) => {\r\n        console.log(country_id);\r\n        setUser((prevUser) => ({ ...prevUser!, [name]: country_id }));\r\n        const country = countries.find(country => country.country_id === country_id);\r\n        if (country) {\r\n            setUser((prevUser) => ({ ...prevUser!, ['country_name']: country.country_name}));\r\n        }\r\n    };\r\n    \r\n    const handleSelectChange2 = (value: string, name: string) => {\r\n        setUser((prevUser) => ({ ...prevUser!, [name]: value }));\r\n    };\r\n\r\n    const handleAddSelectResidence = async (residenceData: Residence) => {\r\n        try {\r\n            const response = await axios.post('/api/data/addResidence/', residenceData);\r\n            window.location.reload();\r\n            console.log(residenceData)\r\n            // Обновляем состояние с новой информацией о проживании\r\n            setUserResidenceInfo([...userResidenceInfo, response.data]);\r\n        } catch (error: any) {\r\n            console.error(error);\r\n            alert('Ошибка при добавлении проживания: ' + error.response.data.message.split('\\n')[0]);\r\n        }\r\n    };\r\n\r\n    const handleDeleteSelectResidence = (residence_id: number) => {\r\n        axios.post('/api/data/deleteResidence/' + residence_id)\r\n            .then(response => {\r\n                console.log(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n            setUserResidenceInfo(prevResidenceInfo => prevResidenceInfo.filter(item => item.residence_id !== residence_id));\r\n    };\r\n\r\n    const handleCheckboxChange = (residence_id: number, event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const isChecked = event.target.checked;\r\n\r\n\r\n        setUserResidenceInfo(prevState => {\r\n            const residenceIndex = prevState.findIndex(residence => residence.residence_id === residence_id);\r\n            if (residenceIndex !== -1) {\r\n                const updatedResidence = { ...prevState[residenceIndex], payment: isChecked };\r\n                return [...prevState.slice(0, residenceIndex), updatedResidence, ...prevState.slice(residenceIndex + 1)];\r\n            }\r\n            return prevState;\r\n        });\r\n        console.log(residence_id + '/' + isChecked)\r\n        \r\n        axios.post('/api/data/update/payment/' + residence_id + '/' + isChecked)\r\n            .then(response => {\r\n                console.log(response.data);\r\n            })\r\n        // Здесь вы можете использовать isChecked и residence_id для обновления записи в базе данных\r\n        // ...\r\n    }\r\n\r\n    if (!user) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className=\"profile\">\r\n                    <><div className=\"user-avatar\">\r\n                            <Avatar size={128} src={user.avatar} />\r\n                        </div></>\r\n                    <><Typography.Title level={3}>\r\n                                {user.first_name} {user.last_name}\r\n                            </Typography.Title></>\r\n                    <><Typography.Paragraph>\r\n                                Дата рождения: {user.birth_date}<br />\r\n                                Пол: {user.gender}<br />\r\n                                Страна проживания: {user.country_name}<br />\r\n                                Телефонный номер: {user.phone}<br />\r\n                                Логин/Имя пользователя :{user.username}<br />\r\n                                Пароль :{user.password}<br />\r\n                                Электронная почта: {user.email}<br />\r\n                            </Typography.Paragraph>\r\n\r\n                            \r\n                            </>\r\n                    <>{!editMode && (\r\n                                <div>\r\n                                    <Button type=\"primary\" onClick={handleEdit}>\r\n                                        Редактировать\r\n                                    </Button>\r\n                                </div>\r\n                            )}</>\r\n                </div>\r\n                <div className=\"residenceDiv\">\r\n                    <div className=\"residenceForm\">\r\n                        <AddResidenceForm onAddResidence={handleAddSelectResidence} />\r\n                    </div>\r\n                    <div>{userResidenceInfo && userResidenceInfo.filter(info => info.user_id === Number(idUser)).map(info => (\r\n                            <div  key={info.room_number}>\r\n                                <div className=\"residenceTitle\">\r\n                                    <div >\r\n                                        <Typography.Title level={4}>Информация о проживании</Typography.Title>\r\n                                        <Typography.Paragraph >\r\n                                            {/* Номер student_id: {info.student_id}<br /> */}\r\n                                            Номер комнаты: {info.room_number}<br />\r\n                                            Дата заселения: {info.move_in_date}<br />\r\n                                            Дата выселения: {info.move_out_date}<br />\r\n                                            Общая стоимость: {info.total_cost}<br />\r\n                                        </Typography.Paragraph>\r\n                                        <div className=\"checkbox-wrapper-26\">\r\n                                            <input type=\"checkbox\" id={String(info.residence_id)} checked={info.payment} onChange={(event) => handleCheckboxChange(info.residence_id, event)}/>\r\n                                            <label htmlFor={String(info.residence_id)}>\r\n                                                <div className=\"tick_mark\"></div>\r\n                                            </label>\r\n                                        </div>\r\n                                    {/* <div className=\"checkbox-wrapper-10\">\r\n                                        <input className=\"tgl tgl-flip\" id=\"cb5\" type=\"checkbox\" checked={info.payment} onChange={(event) => handleCheckboxChange(info.residence_id, event)} />\r\n                                        <label className=\"tgl-btn\" data-tg-off=\"Плоти налог\" data-tg-on=\"Уплочно!\" htmlFor=\"cb5\"></label>\r\n                                    </div> */}\r\n                                    </div>\r\n                                    <Button onClick={() => handleDeleteSelectResidence(info.residence_id)}>Удалить информацию о проживании</Button>\r\n                                </div>\r\n                            </div>\r\n                        ))}</div>\r\n                </div>\r\n\r\n                <>\r\n                {editMode && (\r\n                        <div className='editModeDiv'>\r\n                            <div className='editMode'>\r\n                                <Form layout=\"vertical\">\r\n                                    <Form.Item label=\"Имя\">\r\n                                        <Input name=\"first_name\" value={user.first_name} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Фамилия\">\r\n                                        <Input name=\"last_name\" value={user.last_name} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Дата рождения\">\r\n                                        <Input name=\"birth_date\" value={user.birth_date} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Пол\">\r\n                                        <Select defaultValue={user.gender} onChange={(value) => handleSelectChange2(value, 'gender')}>\r\n                                            <Select.Option value=\"Мужской\">Мужской</Select.Option>\r\n                                            <Select.Option value=\"Женский\">Женский</Select.Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Страна проживания\">\r\n                                        <Select defaultValue={user.country_id} onChange={(value) => handleSelectChange1(value, 'country_id')}>\r\n                                            {countries.map(country => (\r\n                                                <Select.Option key={country.country_id} value={country.country_id}>{country.country_name}</Select.Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Телефонный номер\">\r\n                                        <Input name=\"phone\" value={user.phone} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Логин/Имя пользователя\">\r\n                                        <Input name=\"username\" value={user.username} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Пароль\">\r\n                                        <Input.Password name=\"password\" value={user.password} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Электронная почта\">\r\n                                        <Input name=\"email\" value={user.email} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                </Form>\r\n                                <Button type=\"primary\" onClick={handleSave}>\r\n                                    Сохранить\r\n                                </Button>{' '}\r\n                                <Button onClick={handleCancel}>Отмена</Button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </>\r\n\r\n            </div>\r\n            \r\n            {/* <div className=\"user-page\">\r\n                <Card className=\"user-card\">\r\n                    <div className=\"user-avatar\">\r\n                        <Avatar size={128} src={user.avatar} />\r\n                    </div>\r\n                    <div className=\"user-info\">\r\n                        <Typography.Title level={3}>\r\n                            {user.first_name} {user.last_name}\r\n                        </Typography.Title>\r\n                        <Typography.Paragraph>\r\n                            Дата рождения: {user.birth_date}<br />\r\n                            Пол: {user.gender}<br />\r\n                            Страна проживания: {user.country_name}<br />\r\n                            Телефонный номер: {user.phone}<br />\r\n                            Логин/Имя пользователя :{user.username}<br />\r\n                            Пароль :{user.password}<br />\r\n                            Электронная почта: {user.email}<br />\r\n                        </Typography.Paragraph>\r\n                        <Divider />\r\n                        {!editMode && (\r\n                            <div>\r\n                                <Button type=\"primary\" onClick={handleEdit}>\r\n                                    Редактировать\r\n                                </Button>\r\n                            </div>\r\n                        )}\r\n                        {editMode && (\r\n                            <div>\r\n                                <Form layout=\"vertical\">\r\n                                    <Form.Item label=\"Имя\">\r\n                                        <Input name=\"first_name\" value={user.first_name} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Фамилия\">\r\n                                        <Input name=\"last_name\" value={user.last_name} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Дата рождения\">\r\n                                        <Input name=\"birth_date\" value={user.birth_date} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Пол\">\r\n                                        <Select defaultValue={user.gender} onChange={(value) => handleSelectChange2(value, 'gender')}>\r\n                                            <Select.Option value=\"Мужской\">Мужской</Select.Option>\r\n                                            <Select.Option value=\"Женский\">Женский</Select.Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Страна проживания\">\r\n                                        <Select defaultValue={user.country_id} onChange={(value) => handleSelectChange1(value, 'country_id')}>\r\n                                            {countries.map(country => (\r\n                                                <Select.Option key={country.country_id} value={country.country_id}>{country.country_name}</Select.Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Телефонный номер\">\r\n                                        <Input name=\"phone\" value={user.phone} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Логин/Имя пользователя\">\r\n                                        <Input name=\"username\" value={user.username} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Пароль\">\r\n                                        <Input.Password name=\"password\" value={user.password} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Электронная почта\">\r\n                                        <Input name=\"email\" value={user.email} onChange={handleChange} />\r\n                                    </Form.Item>\r\n                                </Form>\r\n                                <Button type=\"primary\" onClick={handleSave}>\r\n                                    Сохранить\r\n                                </Button>{' '}\r\n                                <Button onClick={handleCancel}>Отмена</Button>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {userResidenceInfo && userResidenceInfo.map(info => (\r\n                        <div key={info.room_number}>\r\n                            <Typography.Title level={4}>Информация о проживании</Typography.Title>\r\n                            <Typography.Paragraph>\r\n                                {/* Номер student_id: {info.student_id}<br /> \r\n                                Номер комнаты: {info.room_number}<br />\r\n                                Дата заселения: {info.move_in_date}<br />\r\n                                Дата выселения: {info.move_out_date}<br />\r\n                                Общая стоимость: {info.total_cost}<br />\r\n                            </Typography.Paragraph>\r\n                            <Button onClick={() => handleDeleteSelectResidence(info.residence_id)}>Удалить информацию о проживании</Button>\r\n                        </div>\r\n                    ))}\r\n                    {/* {!userResidenceInfo && ( \r\n                        <>\r\n                            <AddResidenceForm onAddResidence={handleAddSelectResidence} />\r\n                            {/* <Button onClick={handleAddSelectResidence}>Добавить информацию о проживании</Button> \r\n                        </div>\r\n\r\n                </Card>\r\n            </div> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AdminEditUserPage;",{"ruleId":"76","severity":1,"message":"77","line":3,"column":10,"nodeType":"78","messageId":"79","endLine":3,"endColumn":21},{"ruleId":"76","severity":1,"message":"80","line":4,"column":10,"nodeType":"78","messageId":"79","endLine":4,"endColumn":25},{"ruleId":"76","severity":1,"message":"81","line":70,"column":10,"nodeType":"78","messageId":"79","endLine":70,"endColumn":15},{"ruleId":"76","severity":1,"message":"82","line":71,"column":10,"nodeType":"78","messageId":"79","endLine":71,"endColumn":19},{"ruleId":"76","severity":1,"message":"83","line":71,"column":21,"nodeType":"78","messageId":"79","endLine":71,"endColumn":33},{"ruleId":"84","severity":1,"message":"85","line":184,"column":6,"nodeType":"86","endLine":184,"endColumn":18,"suggestions":"87"},{"ruleId":"76","severity":1,"message":"88","line":269,"column":9,"nodeType":"78","messageId":"79","endLine":269,"endColumn":33},{"ruleId":"76","severity":1,"message":"89","line":290,"column":9,"nodeType":"78","messageId":"79","endLine":290,"endColumn":36},{"ruleId":"76","severity":1,"message":"77","line":5,"column":10,"nodeType":"78","messageId":"79","endLine":5,"endColumn":21},{"ruleId":"76","severity":1,"message":"90","line":6,"column":26,"nodeType":"78","messageId":"79","endLine":6,"endColumn":30},{"ruleId":"76","severity":1,"message":"91","line":6,"column":32,"nodeType":"78","messageId":"79","endLine":6,"endColumn":39},{"ruleId":"76","severity":1,"message":"92","line":19,"column":10,"nodeType":"78","messageId":"79","endLine":19,"endColumn":18},{"ruleId":"76","severity":1,"message":"93","line":21,"column":10,"nodeType":"78","messageId":"79","endLine":21,"endColumn":19},{"ruleId":"76","severity":1,"message":"81","line":186,"column":12,"nodeType":"78","messageId":"79","endLine":186,"endColumn":17},{"ruleId":"94","severity":1,"message":"95","line":205,"column":52,"nodeType":"96","messageId":"97","endLine":205,"endColumn":163,"fix":"98"},{"ruleId":"94","severity":1,"message":"95","line":243,"column":52,"nodeType":"96","messageId":"97","endLine":243,"endColumn":159,"fix":"99"},{"ruleId":"94","severity":1,"message":"100","line":262,"column":52,"nodeType":"96","messageId":"97","endLine":262,"endColumn":90,"fix":"101"},{"ruleId":"76","severity":1,"message":"102","line":3,"column":10,"nodeType":"78","messageId":"79","endLine":3,"endColumn":14},{"ruleId":"84","severity":1,"message":"85","line":54,"column":6,"nodeType":"86","endLine":54,"endColumn":18,"suggestions":"103"},{"ruleId":"76","severity":1,"message":"102","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":14},{"ruleId":"76","severity":1,"message":"90","line":4,"column":26,"nodeType":"78","messageId":"79","endLine":4,"endColumn":30},{"ruleId":"76","severity":1,"message":"91","line":4,"column":32,"nodeType":"78","messageId":"79","endLine":4,"endColumn":39},{"ruleId":"76","severity":1,"message":"92","line":16,"column":12,"nodeType":"78","messageId":"79","endLine":16,"endColumn":20},{"ruleId":"76","severity":1,"message":"93","line":18,"column":12,"nodeType":"78","messageId":"79","endLine":18,"endColumn":21},{"ruleId":"76","severity":1,"message":"104","line":171,"column":13,"nodeType":"78","messageId":"79","endLine":171,"endColumn":22},{"ruleId":"76","severity":1,"message":"81","line":176,"column":12,"nodeType":"78","messageId":"79","endLine":176,"endColumn":17},{"ruleId":"94","severity":1,"message":"95","line":195,"column":52,"nodeType":"96","messageId":"97","endLine":195,"endColumn":163,"fix":"105"},{"ruleId":"94","severity":1,"message":"95","line":231,"column":52,"nodeType":"96","messageId":"97","endLine":231,"endColumn":159,"fix":"106"},{"ruleId":"94","severity":1,"message":"100","line":250,"column":52,"nodeType":"96","messageId":"97","endLine":250,"endColumn":90,"fix":"107"},"@typescript-eslint/no-unused-vars","'useNavigate' is defined but never used.","Identifier","unusedVar","'AnimatePresence' is defined but never used.","'rooms' is assigned a value but never used.","'residence' is assigned a value but never used.","'setResidence' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rows'. Either include it or remove the dependency array.","ArrayExpression",["108"],"'handleAddSelectResidence' is assigned a value but never used.","'handleDeleteSelectResidence' is assigned a value but never used.","'Card' is defined but never used.","'Divider' is defined but never used.","'students' is assigned a value but never used.","'studentId' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['country_id'] found.","Property","unnecessarilyComputedProperty",{"range":"109","text":"110"},{"range":"111","text":"110"},"Unnecessarily computed property ['country_name'] found.",{"range":"112","text":"113"},"'Link' is defined but never used.",["114"],"'idStudent' is assigned a value but never used.",{"range":"115","text":"110"},{"range":"116","text":"110"},{"range":"117","text":"113"},{"desc":"118","fix":"119"},[5886,5900],"'country_id'",[7141,7155],[8004,8020],"'country_name'",{"desc":"118","fix":"120"},[5904,5918],[7053,7067],[7916,7932],"Update the dependencies array to be: [rows, sortConfig]",{"range":"121","text":"122"},{"range":"123","text":"122"},[5476,5488],"[rows, sortConfig]",[1467,1479]]