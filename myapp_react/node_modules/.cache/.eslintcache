[{"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\index.tsx":"1","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\App.tsx":"2","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx":"3","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx":"4","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx":"5","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx":"6"},{"size":437,"mtime":1688470862289,"results":"7","hashOfConfig":"8"},{"size":2294,"mtime":1688593554211,"results":"9","hashOfConfig":"8"},{"size":2509,"mtime":1688507574813,"results":"10","hashOfConfig":"8"},{"size":3325,"mtime":1688481675385,"results":"11","hashOfConfig":"8"},{"size":7764,"mtime":1688481675379,"results":"12","hashOfConfig":"8"},{"size":2479,"mtime":1688580353211,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16kuh62",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\index.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\App.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx",["34"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport './HomePage.css';\r\n\r\n\r\ntype Student = {\r\n  student_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  birth_date: string;\r\n  gender: string;\r\n  country_name: number;\r\n  // phone: string;\r\n  // email: string;\r\n};\r\n\r\ntype SortConfig = {\r\n  key: keyof Student;\r\n  direction: 'ascending' | 'descending';\r\n};\r\n\r\nconst HomePage: React.FC = () => {\r\n  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'first_name', direction: 'ascending' });\r\n  const [rows, setRows] = useState<Student[]>([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/data/')\r\n      .then(response => {\r\n        setRows(response.data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const sortArray = (type: keyof Student) => {\r\n      const sorted = [...rows].sort((a, b) => {\r\n        if (typeof a[type] === 'number' && typeof b[type] === 'number') {\r\n          return (a[type] as number) - (b[type] as number);\r\n        }\r\n        if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n          return (a[type] as string).localeCompare(b[type] as string);\r\n        }\r\n        return 0;\r\n      });\r\n      if (sortConfig.direction === 'descending') sorted.reverse();\r\n      return sorted;\r\n    };\r\n    \r\n\r\n    if (sortConfig.key) {\r\n      const sortedData = sortArray(sortConfig.key);\r\n      setRows(sortedData);\r\n    }\r\n  }, [sortConfig]);\r\n\r\n  const requestSort = (key: keyof Student) => {\r\n    let direction: 'ascending' | 'descending' = 'ascending';\r\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"Login-div\">\r\n        <Link to=\"/login\" className=\"login-button\">Войти</Link>\r\n      </div>\r\n      <div className=\"home-page\">\r\n        <h1 className=\"home-page__title\">Добро пожаловать на главную страницу</h1>\r\n        <p className=\"home-page__info\">\r\n          Жители этого общажного ада.\r\n        </p>\r\n        <table>\r\n          <thead>\r\n          <tr>\r\n            <th onClick={() => requestSort('first_name')}>Имя</th>\r\n            <th onClick={() => requestSort('last_name')}>Фамилия</th>\r\n            <th onClick={() => requestSort('birth_date')}>День рождения</th>\r\n            {/* <th onClick={() => requestSort('email')}>Email</th> */}\r\n            <th onClick={() => requestSort('gender')}>Пол</th>\r\n            <th onClick={() => requestSort('country_name')}>Страна</th>\r\n            {/* <th onClick={() => requestSort('phone')}>Phone</th> */}\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows.map((row, index) => (\r\n              <tr key={index}>\r\n                <td>{row.first_name}</td>\r\n                <td>{row.last_name}</td>\r\n                <td>{row.birth_date}</td>\r\n                {/* <td>{row.email}</td> */}\r\n                <td>{row.gender}</td>\r\n                <td>{row.country_name}</td>\r\n                {/* <td>{row.phone}</td> */}\r\n\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n\r\n\r\n\r\n","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx",["35"],[],"// pages/AdminPage.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './HomePage.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ntype Student = {\r\n  student_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  birth_date: string;\r\n  gender: string;\r\n  country_id: number;\r\n  phone: string;\r\n  username: string;\r\n  password:string;\r\n  email: string;\r\n};\r\ntype Countries = {\r\n  country_id: number;\r\n  country_name: string;\r\n};\r\n\r\ntype SortConfig = {\r\n  key: keyof Student;\r\n  direction: 'ascending' | 'descending';\r\n};\r\n\r\ninterface AdminPageProps {\r\n  onLogout: () => void;\r\n};\r\n\r\nconst AdminPage: React.FC<AdminPageProps> = ({ onLogout }) => {\r\n  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'first_name', direction: 'ascending' });\r\n  const [rows, setRows] = useState<Student[]>([]);\r\n  const navigate = useNavigate();\r\n  //const [newStudent, setNewStudent] = useState({});\r\n  const [countries, setCountries] = useState<Countries[]>([]);\r\n  const [newStudent, setNewStudent] = useState<Student>({\r\n    student_id: 0,\r\n    first_name: '',\r\n    last_name: '',\r\n    birth_date: '',\r\n    gender: '',\r\n    country_id: 0,\r\n    phone: '',\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n  });\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  const handleInputChange = (event:  React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    setNewStudent({\r\n      ...newStudent,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  \r\n// pages/AdminPage.tsx\r\n  const handleAddStudent = () => {\r\n    const csrftoken = getCookie('csrftoken'); // Получаем CSRF токен\r\n  \r\n    axios.post('/api/data/addStudent/', newStudent, {\r\n      headers: {\r\n        'X-CSRFToken': csrftoken // Добавляем CSRF токен в заголовки запроса\r\n      }\r\n    })\r\n    .then(response => {\r\n      setRows([...rows, response.data]);\r\n      setNewStudent({\r\n        student_id: 0,\r\n        first_name: '',\r\n        last_name: '',\r\n        birth_date: '',\r\n        gender: '',\r\n        country_id: 0,\r\n        phone: '',\r\n        username: '',\r\n        password: '',\r\n        email: '',\r\n      });\r\n    });\r\n  };\r\n  \r\n  function getCookie(name: string): string | null {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n        const cookie = cookies[i].trim();\r\n        if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return cookieValue;\r\n  }\r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    axios.get('/api/data/ollStudent/')\r\n      .then(response => {\r\n        setRows(response.data);\r\n        console.log(\"response.data\");\r\n        console.log(response.data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const sortArray = (type: keyof Student) => {\r\n      const sorted = [...rows].sort((a, b) => {\r\n        if (typeof a[type] === 'number' && typeof b[type] === 'number') {\r\n          return (a[type] as number) - (b[type] as number);\r\n        }\r\n        if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n          return (a[type] as string).localeCompare(b[type] as string);\r\n        }\r\n        return 0;\r\n      });\r\n      if (sortConfig.direction === 'descending') sorted.reverse();\r\n      return sorted;\r\n    };\r\n    if (sortConfig.key) {\r\n      const sortedData = sortArray(sortConfig.key);\r\n      setRows(sortedData);\r\n    }\r\n  }, [sortConfig]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/countries/')\r\n      .then(response => {\r\n        setCountries(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('There was an!', error);\r\n      });\r\n  }, []);\r\n\r\n  const requestSort = (key: keyof Student) => {\r\n    let direction: 'ascending' | 'descending' = 'ascending';\r\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  const buttonOnLogout = () => {\r\n    onLogout();\r\n    navigate('/');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* <h1>Страница администратора</h1> */}\r\n      <div>\r\n      <div className=\"Login-div\">\r\n        <button className=\"login-button\" onClick={buttonOnLogout}>Logout</button>\r\n      </div>\r\n      <div className=\"home-page\">\r\n        <h1 className=\"home-page__title\">Страница администратора</h1>\r\n        <p className=\"home-page__info\">\r\n          Жители этого общажного ада.\r\n        </p>\r\n        <button className=\"login-button\" onClick={() => setShowForm(!showForm)}>Добавить нового студента</button>\r\n        {showForm && (\r\n        <div className=\"add-student-form\">\r\n        \r\n        \r\n        {/* <div > */}\r\n          <button className=\"login-button\" onClick={() => setShowForm(!showForm)}>\r\n            Скрыть форму \r\n          </button>\r\n          <h2>Добавить нового студента</h2>\r\n          <input name=\"first_name\" value={newStudent.first_name} onChange={handleInputChange} placeholder=\"Имя\" />\r\n          <input name=\"last_name\" value={newStudent.last_name} onChange={handleInputChange} placeholder=\"Фамилия\" />\r\n          <input type=\"date\" name=\"birth_date\" value={newStudent.birth_date} onChange={handleInputChange} placeholder=\"День рождения\" />\r\n          <input name=\"gender\" value={newStudent.gender} onChange={handleInputChange} placeholder=\"Пол\" />\r\n          <select name=\"country_id\" value={newStudent.country_id} onChange={handleInputChange}>\r\n          {countries.map(country => (\r\n          <option key={country.country_id} value={country.country_id}>{country.country_name}</option>\r\n            ))}\r\n          </select>\r\n          <input name=\"phone\" value={newStudent.phone} onChange={handleInputChange} placeholder=\"Телефон\" />\r\n      <input name=\"email\" value={newStudent.email} onChange={handleInputChange} placeholder=\"Email\" />\r\n      <button onClick={handleAddStudent}>Добавить студента</button>\r\n        </div>\r\n        )}\r\n        {/* </div> */}\r\n        \r\n        <table>\r\n          <thead>\r\n          <tr>\r\n            <th onClick={() => requestSort('first_name')}>Имя</th>\r\n            <th onClick={() => requestSort('last_name')}>Фамилия</th>\r\n            <th onClick={() => requestSort('birth_date')}>День рождения</th>\r\n            <th onClick={() => requestSort('email')}>Email</th>\r\n            <th onClick={() => requestSort('gender')}>Пол</th>\r\n            <th onClick={() => requestSort('country_id')}>Страна</th>\r\n            <th onClick={() => requestSort('username')}>Логин</th>\r\n            <th onClick={() => requestSort('password')}>Пароль</th>\r\n            <th onClick={() => requestSort('phone')}>Phone</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows.map((row, index) => (\r\n              <tr key={index}>\r\n                <td>{row.first_name}</td>\r\n                <td>{row.last_name}</td>\r\n                <td>{row.birth_date}</td>\r\n                <td>{row.email}</td>\r\n                <td>{row.gender}</td>\r\n                <td>{row.country_id}</td>\r\n                <td>{row.username}</td>\r\n                <td>{row.password}</td>\r\n                <td>{row.phone}</td>\r\n                <td>изменить \"вьеди кнопку\"</td>\r\n\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminPage;\r\n","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx",[],[],{"ruleId":"36","severity":1,"message":"37","line":54,"column":6,"nodeType":"38","endLine":54,"endColumn":18,"suggestions":"39"},{"ruleId":"36","severity":1,"message":"37","line":130,"column":6,"nodeType":"38","endLine":130,"endColumn":18,"suggestions":"40"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rows'. Either include it or remove the dependency array.","ArrayExpression",["41"],["42"],{"desc":"43","fix":"44"},{"desc":"43","fix":"45"},"Update the dependencies array to be: [rows, sortConfig]",{"range":"46","text":"47"},{"range":"48","text":"47"},[1459,1471],"[rows, sortConfig]",[3597,3609]]