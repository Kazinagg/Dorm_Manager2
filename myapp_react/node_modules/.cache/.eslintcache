[{"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\index.tsx":"1","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\App.tsx":"2","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx":"3","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx":"4","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx":"5","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx":"6","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\StudentsPage.tsx":"7"},{"size":437,"mtime":1688470862289,"results":"8","hashOfConfig":"9"},{"size":5019,"mtime":1688943414415,"results":"10","hashOfConfig":"9"},{"size":2509,"mtime":1688507574813,"results":"11","hashOfConfig":"9"},{"size":503,"mtime":1688943414421,"results":"12","hashOfConfig":"9"},{"size":13243,"mtime":1688980044671,"results":"13","hashOfConfig":"9"},{"size":2479,"mtime":1688580353211,"results":"14","hashOfConfig":"9"},{"size":3341,"mtime":1688672053143,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16kuh62",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\index.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\App.tsx",["39"],[],"import { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\r\nimport { AnimatePresence, motion } from 'framer-motion';\r\nimport AdminPage from './pages/AdminPage';\r\nimport UserPage from './pages/UserPage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport HomePage from './pages/HomePage';\r\nimport StudentsPage from './pages/StudentsPage';\r\nimport logo from './images/logo.png';\r\nimport logo_min from './images/logo_min.png';\r\n\r\nconst App: React.FC = () => {\r\n  const [isLoggedInAdmin, setIsLoggedInAdmin] = useState(false);\r\n  const [isLoggedInUser, setIsLoggedInUser] = useState(false);\r\n  const [id, setId] = useState<number | null>(null);\r\n  \r\n\r\n  useEffect(() => {\r\n    const adminToken = localStorage.getItem('adminToken');\r\n    const userToken = localStorage.getItem('userToken');\r\n    if (adminToken) {\r\n      setIsLoggedInAdmin(true);\r\n    }\r\n    if (userToken) {\r\n      setIsLoggedInUser(true);\r\n      const userId = localStorage.getItem('userId');\r\n      if (userId) {\r\n        setId(Number(userId));\r\n      }\r\n    }\r\n  }, []);\r\n\r\n\r\n  const handleLogin = (type: boolean, id: number) => {\r\n    setId(id);\r\n    if (type){\r\n      setIsLoggedInAdmin(true);\r\n      localStorage.setItem('adminToken', 'your token');\r\n    } else{\r\n      setIsLoggedInUser(true);\r\n      localStorage.setItem('userToken', 'your token');\r\n      localStorage.setItem('userId', id.toString());\r\n    }\r\n  };\r\n\r\n\r\n  const handleLogout = () => {\r\n    setIsLoggedInAdmin(false);\r\n    setIsLoggedInUser(false);\r\n    setId(null);\r\n    localStorage.removeItem('adminToken');\r\n    localStorage.removeItem('userToken');\r\n    localStorage.removeItem('userId');\r\n  };\r\n\r\n\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const navVariants = {\r\n    open: { opacity: 1, x: 0 },\r\n    closed: { opacity: '50%', x: \"-90%\" },\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Router>\r\n      <div onMouseEnter={() => setIsHovered(true)} onMouseLeave={() => setIsHovered(false)}>\r\n        \r\n        <motion.div \r\n          style={{position: 'fixed', maxWidth: '15%', background: '#1f2932', height: '100%'}}\r\n          initial=\"closed\"\r\n          animate={isHovered ? \"open\" : \"closed\"}\r\n          variants={navVariants}\r\n          transition={{ duration: 0.8 }}\r\n        >\r\n          <div style={{height: '100px'}}>\r\n          {isHovered ? (\r\n            <Link to=\"/\" style={{ color: '#fff', textDecoration: 'none' }}><motion.img \r\n            key=\"open\"\r\n            src={logo} \r\n            alt=\"Лого\" \r\n            style={{width: '100%', margin: '16px' }}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n          /></Link>\r\n           \r\n          ) : (\r\n            <motion.img \r\n              key=\"closed\"\r\n              src={logo_min} \r\n              alt=\"Лого\" \r\n              style={{width: '20%', margin: '16px 16px 16px 90%' }}\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              exit={{ opacity: 0 }}\r\n            />\r\n          )}\r\n          </div>\r\n          \r\n\r\n\r\n        <Link to=\"/\" style={{ color: '#fff', textDecoration: 'none' }}>Home</Link> <br/>\r\n        <Link to=\"/students\" style={{ color: '#fff', textDecoration: 'none' }}>дибылы</Link><br/>\r\n        \r\n        {!isLoggedInAdmin && !isLoggedInUser && (\r\n          <div>\r\n            <Link to=\"/login\" style={{ color: '#fff', textDecoration: 'none' }}>Войти</Link>\r\n          </div>\r\n        )}\r\n        {isLoggedInAdmin && (\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <Link to=\"/admin\" style={{ color: '#fff', textDecoration: 'none' }}>Админ-панель</Link> <div style={{ color: '#fff', textDecoration: 'none' }}> | </div>\r\n            <div onClick={() => handleLogout()} style={{ color: '#fff', textDecoration: 'none', cursor: 'pointer' }}>Выйти</div>\r\n          </div>\r\n        )}\r\n        {isLoggedInUser && id && (\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <Link to=\"/user\" style={{ color: '#fff', textDecoration: 'none' }}>Личный кабинет</Link> <div style={{ color: '#fff', textDecoration: 'none' }}> | </div>\r\n            <div onClick={() => handleLogout()} style={{ color: '#fff', textDecoration: 'none', cursor: 'pointer' }}>Выйти</div>\r\n          </div>\r\n        )}\r\n\r\n\r\n        </motion.div>\r\n      </div>\r\n      \r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"/students\" element={<StudentsPage />} />\r\n        <Route path=\"/login\" element={<LoginPage onLogin={handleLogin} />} />\r\n        {isLoggedInAdmin &&            (\r\n          <Route path=\"/admin\" element={<AdminPage onLogout={handleLogout} />} />\r\n        )}\r\n        {isLoggedInUser && id && (\r\n          <Route path=\"/user\" element={<UserPage userId={id} onLogout={handleLogout} />} />\r\n        )}\r\n      </Routes>\r\n\r\n\r\n    </Router>\r\n    \r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx",["40","41","42"],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\StudentsPage.tsx",["43","44"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport './HomePage.css';\r\n\r\n\r\ntype Student = {\r\n  student_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  birth_date: string;\r\n  gender: string;\r\n  country_name: number;\r\n  // phone: string;\r\n  // email: string;\r\n};\r\n\r\ntype SortConfig = {\r\n  key: keyof Student;\r\n  direction: 'ascending' | 'descending';\r\n};\r\n\r\nconst StudentsPage: React.FC = () => {\r\n  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'first_name', direction: 'ascending' });\r\n  const [rows, setRows] = useState<Student[]>([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/data/')\r\n      .then(response => {\r\n        setRows(response.data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const sortArray = (type: keyof Student) => {\r\n      const sorted = [...rows].sort((a, b) => {\r\n        if (typeof a[type] === 'number' && typeof b[type] === 'number') {\r\n          return (a[type] as number) - (b[type] as number);\r\n        }\r\n        if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n          return (a[type] as string).localeCompare(b[type] as string);\r\n        }\r\n        return 0;\r\n      });\r\n      if (sortConfig.direction === 'descending') sorted.reverse();\r\n      return sorted;\r\n    };\r\n    \r\n\r\n    if (sortConfig.key) {\r\n      const sortedData = sortArray(sortConfig.key);\r\n      setRows(sortedData);\r\n    }\r\n  }, [sortConfig]);\r\n\r\n  const requestSort = (key: keyof Student) => {\r\n    let direction: 'ascending' | 'descending' = 'ascending';\r\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <div className=\"Login-div\">\r\n        <Link to=\"/login\" className=\"login-button\">Войти</Link>\r\n      </div> */}\r\n      <div className=\"home-page\">\r\n        <h1 className=\"home-page__title\">Добро пожаловать на главную страницу</h1>\r\n        <p className=\"home-page__info\">\r\n          Жители этого общажного ада.\r\n        </p>\r\n        <table>\r\n          <thead>\r\n          <tr>\r\n            <th onClick={() => requestSort('first_name')}>Имя</th>\r\n            <th onClick={() => requestSort('last_name')}>Фамилия</th>\r\n            <th onClick={() => requestSort('birth_date')}>День рождения</th>\r\n            {/* <th onClick={() => requestSort('email')}>Email</th> */}\r\n            <th onClick={() => requestSort('gender')}>Пол</th>\r\n            <th onClick={() => requestSort('country_name')}>Страна</th>\r\n            {/* <th onClick={() => requestSort('phone')}>Phone</th> */}\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows.map((row, index) => (\r\n              <tr key={index}>\r\n                <td>{row.first_name}</td>\r\n                <td>{row.last_name}</td>\r\n                <td>{row.birth_date}</td>\r\n                {/* <td>{row.email}</td> */}\r\n                <td>{row.gender}</td>\r\n                <td>{row.country_name}</td>\r\n                {/* <td>{row.phone}</td> */}\r\n\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentsPage;\r\n\r\n\r\n\r\n",{"ruleId":"45","severity":1,"message":"46","line":3,"column":10,"nodeType":"47","messageId":"48","endLine":3,"endColumn":25},{"ruleId":"45","severity":1,"message":"49","line":41,"column":10,"nodeType":"47","messageId":"48","endLine":41,"endColumn":18},{"ruleId":"45","severity":1,"message":"50","line":41,"column":20,"nodeType":"47","messageId":"48","endLine":41,"endColumn":31},{"ruleId":"51","severity":1,"message":"52","line":159,"column":6,"nodeType":"53","endLine":159,"endColumn":18,"suggestions":"54"},{"ruleId":"45","severity":1,"message":"55","line":3,"column":10,"nodeType":"47","messageId":"48","endLine":3,"endColumn":14},{"ruleId":"51","severity":1,"message":"52","line":54,"column":6,"nodeType":"53","endLine":54,"endColumn":18,"suggestions":"56"},"@typescript-eslint/no-unused-vars","'AnimatePresence' is defined but never used.","Identifier","unusedVar","'students' is assigned a value but never used.","'setStudents' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rows'. Either include it or remove the dependency array.","ArrayExpression",["57"],"'Link' is defined but never used.",["58"],{"desc":"59","fix":"60"},{"desc":"59","fix":"61"},"Update the dependencies array to be: [rows, sortConfig]",{"range":"62","text":"63"},{"range":"64","text":"63"},[4691,4703],"[rows, sortConfig]",[1463,1475]]