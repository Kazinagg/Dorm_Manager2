[{"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\index.tsx":"1","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\App.tsx":"2","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx":"3","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx":"4","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx":"5","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx":"6","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\StudentsPage.tsx":"7"},{"size":437,"mtime":1688470862289,"results":"8","hashOfConfig":"9"},{"size":4954,"mtime":1688680359810,"results":"10","hashOfConfig":"9"},{"size":2509,"mtime":1688507574813,"results":"11","hashOfConfig":"9"},{"size":503,"mtime":1688650515374,"results":"12","hashOfConfig":"9"},{"size":10506,"mtime":1688679156514,"results":"13","hashOfConfig":"9"},{"size":2479,"mtime":1688580353211,"results":"14","hashOfConfig":"9"},{"size":3341,"mtime":1688672053143,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16kuh62",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\index.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\App.tsx",["39"],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx",["40","41","42"],[],"// pages/AdminPage.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './HomePage.css';\r\nimport './AdminPage.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ntype Student = {\r\n  student_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  birth_date: string;\r\n  gender: string;\r\n  country_name: string;\r\n  country_id: number;\r\n  phone: string;\r\n  username: string;\r\n  password:string;\r\n  email: string;\r\n};\r\ntype Countries = {\r\n  country_id: number;\r\n  country_name: string;\r\n};\r\n\r\ntype SortConfig = {\r\n  key: keyof Student;\r\n  direction: 'ascending' | 'descending';\r\n};\r\n\r\ninterface AdminPageProps {\r\n  onLogout: () => void;\r\n};\r\n\r\nconst AdminPage: React.FC<AdminPageProps> = ({ onLogout }) => {\r\n  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'first_name', direction: 'ascending' });\r\n  const [rows, setRows] = useState<Student[]>([]);\r\n  const navigate = useNavigate();\r\n  const [students, setStudents] = useState<Student[]>([]);\r\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\r\n  //const [newStudent, setNewStudent] = useState({});\r\n  const [countries, setCountries] = useState<Countries[]>([]);\r\n  const [newStudent, setNewStudent] = useState<Student>({\r\n    student_id: 0,\r\n    first_name: '',\r\n    last_name: '',\r\n    birth_date: '',\r\n    gender: '',\r\n    country_id: 0,\r\n    country_name: '',\r\n    phone: '',\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n  });\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  const handleInputChange = (event:  React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    setNewStudent({\r\n      ...newStudent,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  \r\n// pages/AdminPage.tsx\r\n  const handleAddStudent = () => {\r\n    const csrftoken = getCookie('csrftoken'); // Получаем CSRF токен\r\n  \r\n    axios.post('/api/data/addStudent/', newStudent, {\r\n      headers: {\r\n        'X-CSRFToken': csrftoken // Добавляем CSRF токен в заголовки запроса\r\n      }\r\n    })\r\n    .then(response => {\r\n      setRows([...rows, response.data]);\r\n      setNewStudent({\r\n        student_id: 0,\r\n        first_name: '',\r\n        last_name: '',\r\n        birth_date: '',\r\n        gender: '',\r\n        country_id: 0,\r\n        country_name: '',\r\n        phone: '',\r\n        username: '',\r\n        password: '',\r\n        email: '',\r\n      });\r\n    });\r\n  };\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const filteredRows = rows.filter(\r\n    (row) =>\r\n      row.first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      row.last_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      row.phone.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      row.gender.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      row.country_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      row.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n      // добавьте здесь другие поля, по которым вы хотите фильтровать\r\n  );\r\n    \r\n  function getCookie(name: string): string | null {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n        const cookie = cookies[i].trim();\r\n        if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return cookieValue;\r\n  }\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    axios.get('/api/data/ollStudent/')\r\n      .then(response => {\r\n        setRows(response.data);\r\n        console.log(\"response.data\");\r\n        console.log(response.data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const sortArray = (type: keyof Student) => {\r\n      const sorted = [...rows].sort((a, b) => {\r\n        if (typeof a[type] === 'number' && typeof b[type] === 'number') {\r\n          return (a[type] as number) - (b[type] as number);\r\n        }\r\n        if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n          return (a[type] as string).localeCompare(b[type] as string);\r\n        }\r\n        return 0;\r\n      });\r\n      if (sortConfig.direction === 'descending') sorted.reverse();\r\n      return sorted;\r\n    };\r\n    if (sortConfig.key) {\r\n      const sortedData = sortArray(sortConfig.key);\r\n      setRows(sortedData);\r\n    }\r\n  }, [sortConfig]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/countries/')\r\n      .then(response => {\r\n        setCountries(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('There was an!', error);\r\n      });\r\n  }, []);\r\n\r\n  const requestSort = (key: keyof Student) => {\r\n    let direction: 'ascending' | 'descending' = 'ascending';\r\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  const buttonOnLogout = () => {\r\n    onLogout();\r\n    navigate('/');\r\n  }\r\n\r\n  const handleSelectStudent = (student: Student) => {\r\n    setSelectedStudent(student);\r\n  };\r\n\r\n  const handleCloseEditForm = () => {\r\n    setSelectedStudent(null);\r\n  };\r\n\r\n  const handleDeleteStudent = (studentId: number) => {\r\n    // Здесь должен быть ваш код для удаления студента\r\n  };\r\n\r\n  const handleUpdateStudent = (student: Student) => {\r\n    // Здесь должен быть ваш код для обновления данных студента\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <div className=\"Login-div\">\r\n      <button className=\"btn\" onClick={buttonOnLogout}>Logout</button>\r\n    </div>\r\n    <div className=\"home-page\">\r\n      <h1 className=\"home-page__title\">Страница администратора</h1>\r\n      <p className=\"home-page__info\">\r\n        Жители этого общажного ада.\r\n      </p>\r\n      <button className=\"btn\" onClick={() => setShowForm(!showForm)}>Добавить нового студента</button>\r\n      {showForm && (\r\n      <div className=\"add-student-form\">\r\n        <button className=\"btn\" onClick={() => setShowForm(!showForm)}>\r\n          X\r\n        </button>\r\n        <h2>Добавить нового студента</h2>\r\n          <input name=\"first_name\" value={newStudent.first_name} onChange={handleInputChange} placeholder=\"Имя\" />\r\n          <input name=\"last_name\" value={newStudent.last_name} onChange={handleInputChange} placeholder=\"Фамилия\" />\r\n          <input type=\"date\" name=\"birth_date\" value={newStudent.birth_date} onChange={handleInputChange} placeholder=\"День рождения\" />\r\n          <input name=\"gender\" value={newStudent.gender} onChange={handleInputChange} placeholder=\"Пол\" />\r\n          <select name=\"country_id\" value={newStudent.country_id} onChange={handleInputChange}>\r\n          {countries.map(country => (\r\n          <option key={country.country_id} value={country.country_id}>{country.country_name}</option>\r\n            ))}\r\n          </select>\r\n          <input name=\"phone\" value={newStudent.phone} onChange={handleInputChange} placeholder=\"Телефон\" />\r\n      <input name=\"email\" value={newStudent.email} onChange={handleInputChange} placeholder=\"Email\" />\r\n      {/* <button onClick={handleAddStudent}>Добавить студента</button> */}\r\n      <button className=\"btn\" onClick={handleAddStudent}>Добавить студента</button>\r\n      </div>\r\n      )}\r\n        {/* </div> */}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Поиск\"\r\n          value={searchTerm}\r\n          onChange={handleSearchChange}\r\n        />\r\n        <table>\r\n          <thead>\r\n          <tr>\r\n            <th onClick={() => requestSort('first_name')}>Имя</th>\r\n            <th onClick={() => requestSort('last_name')}>Фамилия</th>\r\n            {/* <th onClick={() => requestSort('birth_date')}>День рождения</th> */}\r\n            <th onClick={() => requestSort('email')}>Email</th>\r\n            <th onClick={() => requestSort('gender')}>Пол</th>\r\n            <th onClick={() => requestSort('country_name')}>Страна</th>\r\n            {/* <th onClick={() => requestSort('username')}>Логин</th> */}\r\n            {/* <th onClick={() => requestSort('password')}>Пароль</th> */}\r\n            <th onClick={() => requestSort('phone')}>Phone</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n            {filteredRows.map((row, index) => (\r\n              <tr key={index}>\r\n                <td>{row.first_name}</td>\r\n                <td>{row.last_name}</td>\r\n                {/* <td>{row.birth_date}</td> */}\r\n                <td>{row.email}</td>\r\n                <td>{row.gender}</td>\r\n                <td>{row.country_name}</td>\r\n                {/* <td>{row.username}</td> */}\r\n                {/* <td>{row.password}</td> */}\r\n                <td>{row.phone}</td>\r\n                <td>\r\n                  <button className=\"btn\" onClick={() => handleSelectStudent(row)}>Показать</button>\r\n                </td>\r\n\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        {selectedStudent && (\r\n      <div className=\"student-info\">\r\n        <h2>Информация о студенте</h2>\r\n          <p>Имя: {selectedStudent.first_name}</p>\r\n          <p>Фамилия: {selectedStudent.last_name}</p>\r\n          <p>Email: {selectedStudent.email}</p>\r\n          <p>Пол: {selectedStudent.gender}</p>\r\n          <p>Страна: {selectedStudent.country_name}</p>\r\n          <p>Phone: {selectedStudent.phone}</p>\r\n          <p>День рождения: {selectedStudent.birth_date}</p>\r\n          <p>Имя пользователя: {selectedStudent.username}</p>\r\n          <p>Пароль: {selectedStudent.password}</p>\r\n        <button className=\"btn\" onClick={() => handleDeleteStudent(selectedStudent.student_id)}>Удалить</button>\r\n        <button className=\"btn\" onClick={() => handleUpdateStudent(selectedStudent)}>Изменить</button>\r\n        <button className=\"btn\" onClick={() => handleCloseEditForm()}>Закрыть</button>\r\n      </div>\r\n    )}\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default AdminPage;\r\n","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\StudentsPage.tsx",["43","44"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport './HomePage.css';\r\n\r\n\r\ntype Student = {\r\n  student_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  birth_date: string;\r\n  gender: string;\r\n  country_name: number;\r\n  // phone: string;\r\n  // email: string;\r\n};\r\n\r\ntype SortConfig = {\r\n  key: keyof Student;\r\n  direction: 'ascending' | 'descending';\r\n};\r\n\r\nconst StudentsPage: React.FC = () => {\r\n  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'first_name', direction: 'ascending' });\r\n  const [rows, setRows] = useState<Student[]>([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/data/')\r\n      .then(response => {\r\n        setRows(response.data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const sortArray = (type: keyof Student) => {\r\n      const sorted = [...rows].sort((a, b) => {\r\n        if (typeof a[type] === 'number' && typeof b[type] === 'number') {\r\n          return (a[type] as number) - (b[type] as number);\r\n        }\r\n        if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n          return (a[type] as string).localeCompare(b[type] as string);\r\n        }\r\n        return 0;\r\n      });\r\n      if (sortConfig.direction === 'descending') sorted.reverse();\r\n      return sorted;\r\n    };\r\n    \r\n\r\n    if (sortConfig.key) {\r\n      const sortedData = sortArray(sortConfig.key);\r\n      setRows(sortedData);\r\n    }\r\n  }, [sortConfig]);\r\n\r\n  const requestSort = (key: keyof Student) => {\r\n    let direction: 'ascending' | 'descending' = 'ascending';\r\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <div className=\"Login-div\">\r\n        <Link to=\"/login\" className=\"login-button\">Войти</Link>\r\n      </div> */}\r\n      <div className=\"home-page\">\r\n        <h1 className=\"home-page__title\">Добро пожаловать на главную страницу</h1>\r\n        <p className=\"home-page__info\">\r\n          Жители этого общажного ада.\r\n        </p>\r\n        <table>\r\n          <thead>\r\n          <tr>\r\n            <th onClick={() => requestSort('first_name')}>Имя</th>\r\n            <th onClick={() => requestSort('last_name')}>Фамилия</th>\r\n            <th onClick={() => requestSort('birth_date')}>День рождения</th>\r\n            {/* <th onClick={() => requestSort('email')}>Email</th> */}\r\n            <th onClick={() => requestSort('gender')}>Пол</th>\r\n            <th onClick={() => requestSort('country_name')}>Страна</th>\r\n            {/* <th onClick={() => requestSort('phone')}>Phone</th> */}\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows.map((row, index) => (\r\n              <tr key={index}>\r\n                <td>{row.first_name}</td>\r\n                <td>{row.last_name}</td>\r\n                <td>{row.birth_date}</td>\r\n                {/* <td>{row.email}</td> */}\r\n                <td>{row.gender}</td>\r\n                <td>{row.country_name}</td>\r\n                {/* <td>{row.phone}</td> */}\r\n\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentsPage;\r\n\r\n\r\n\r\n",{"ruleId":"45","severity":1,"message":"46","line":3,"column":10,"nodeType":"47","messageId":"48","endLine":3,"endColumn":25},{"ruleId":"45","severity":1,"message":"49","line":39,"column":10,"nodeType":"47","messageId":"48","endLine":39,"endColumn":18},{"ruleId":"45","severity":1,"message":"50","line":39,"column":20,"nodeType":"47","messageId":"48","endLine":39,"endColumn":31},{"ruleId":"51","severity":1,"message":"52","line":153,"column":6,"nodeType":"53","endLine":153,"endColumn":18,"suggestions":"54"},{"ruleId":"45","severity":1,"message":"55","line":3,"column":10,"nodeType":"47","messageId":"48","endLine":3,"endColumn":14},{"ruleId":"51","severity":1,"message":"52","line":54,"column":6,"nodeType":"53","endLine":54,"endColumn":18,"suggestions":"56"},"@typescript-eslint/no-unused-vars","'AnimatePresence' is defined but never used.","Identifier","unusedVar","'students' is assigned a value but never used.","'setStudents' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rows'. Either include it or remove the dependency array.","ArrayExpression",["57"],"'Link' is defined but never used.",["58"],{"desc":"59","fix":"60"},{"desc":"59","fix":"61"},"Update the dependencies array to be: [rows, sortConfig]",{"range":"62","text":"63"},{"range":"64","text":"63"},[4581,4593],"[rows, sortConfig]",[1463,1475]]