[{"C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\index.tsx":"1","C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\App.tsx":"2","C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx":"3","C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx":"4","C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx":"5","C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\pages\\StudentsPage.tsx":"6","C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx":"7"},{"size":437,"mtime":1688997054060,"results":"8","hashOfConfig":"9"},{"size":5019,"mtime":1688997054057,"results":"10","hashOfConfig":"9"},{"size":2509,"mtime":1688997054068,"results":"11","hashOfConfig":"9"},{"size":2479,"mtime":1688997054071,"results":"12","hashOfConfig":"9"},{"size":13243,"mtime":1688997054063,"results":"13","hashOfConfig":"9"},{"size":3349,"mtime":1688997517202,"results":"14","hashOfConfig":"9"},{"size":5012,"mtime":1688997603066,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1joum42",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\index.tsx",[],[],"C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\App.tsx",["39"],[],"import { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\r\nimport { AnimatePresence, motion } from 'framer-motion';\r\nimport AdminPage from './pages/AdminPage';\r\nimport UserPage from './pages/UserPage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport HomePage from './pages/HomePage';\r\nimport StudentsPage from './pages/StudentsPage';\r\nimport logo from './images/logo.png';\r\nimport logo_min from './images/logo_min.png';\r\n\r\nconst App: React.FC = () => {\r\n  const [isLoggedInAdmin, setIsLoggedInAdmin] = useState(false);\r\n  const [isLoggedInUser, setIsLoggedInUser] = useState(false);\r\n  const [id, setId] = useState<number | null>(null);\r\n  \r\n\r\n  useEffect(() => {\r\n    const adminToken = localStorage.getItem('adminToken');\r\n    const userToken = localStorage.getItem('userToken');\r\n    if (adminToken) {\r\n      setIsLoggedInAdmin(true);\r\n    }\r\n    if (userToken) {\r\n      setIsLoggedInUser(true);\r\n      const userId = localStorage.getItem('userId');\r\n      if (userId) {\r\n        setId(Number(userId));\r\n      }\r\n    }\r\n  }, []);\r\n\r\n\r\n  const handleLogin = (type: boolean, id: number) => {\r\n    setId(id);\r\n    if (type){\r\n      setIsLoggedInAdmin(true);\r\n      localStorage.setItem('adminToken', 'your token');\r\n    } else{\r\n      setIsLoggedInUser(true);\r\n      localStorage.setItem('userToken', 'your token');\r\n      localStorage.setItem('userId', id.toString());\r\n    }\r\n  };\r\n\r\n\r\n  const handleLogout = () => {\r\n    setIsLoggedInAdmin(false);\r\n    setIsLoggedInUser(false);\r\n    setId(null);\r\n    localStorage.removeItem('adminToken');\r\n    localStorage.removeItem('userToken');\r\n    localStorage.removeItem('userId');\r\n  };\r\n\r\n\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const navVariants = {\r\n    open: { opacity: 1, x: 0 },\r\n    closed: { opacity: '50%', x: \"-90%\" },\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Router>\r\n      <div onMouseEnter={() => setIsHovered(true)} onMouseLeave={() => setIsHovered(false)}>\r\n        \r\n        <motion.div \r\n          style={{position: 'fixed', maxWidth: '15%', background: '#1f2932', height: '100%'}}\r\n          initial=\"closed\"\r\n          animate={isHovered ? \"open\" : \"closed\"}\r\n          variants={navVariants}\r\n          transition={{ duration: 0.8 }}\r\n        >\r\n          <div style={{height: '100px'}}>\r\n          {isHovered ? (\r\n            <Link to=\"/\" style={{ color: '#fff', textDecoration: 'none' }}><motion.img \r\n            key=\"open\"\r\n            src={logo} \r\n            alt=\"Лого\" \r\n            style={{width: '100%', margin: '16px' }}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n          /></Link>\r\n           \r\n          ) : (\r\n            <motion.img \r\n              key=\"closed\"\r\n              src={logo_min} \r\n              alt=\"Лого\" \r\n              style={{width: '20%', margin: '16px 16px 16px 90%' }}\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              exit={{ opacity: 0 }}\r\n            />\r\n          )}\r\n          </div>\r\n          \r\n\r\n\r\n        <Link to=\"/\" style={{ color: '#fff', textDecoration: 'none' }}>Home</Link> <br/>\r\n        <Link to=\"/students\" style={{ color: '#fff', textDecoration: 'none' }}>дибылы</Link><br/>\r\n        \r\n        {!isLoggedInAdmin && !isLoggedInUser && (\r\n          <div>\r\n            <Link to=\"/login\" style={{ color: '#fff', textDecoration: 'none' }}>Войти</Link>\r\n          </div>\r\n        )}\r\n        {isLoggedInAdmin && (\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <Link to=\"/admin\" style={{ color: '#fff', textDecoration: 'none' }}>Админ-панель</Link> <div style={{ color: '#fff', textDecoration: 'none' }}> | </div>\r\n            <div onClick={() => handleLogout()} style={{ color: '#fff', textDecoration: 'none', cursor: 'pointer' }}>Выйти</div>\r\n          </div>\r\n        )}\r\n        {isLoggedInUser && id && (\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <Link to=\"/user\" style={{ color: '#fff', textDecoration: 'none' }}>Личный кабинет</Link> <div style={{ color: '#fff', textDecoration: 'none' }}> | </div>\r\n            <div onClick={() => handleLogout()} style={{ color: '#fff', textDecoration: 'none', cursor: 'pointer' }}>Выйти</div>\r\n          </div>\r\n        )}\r\n\r\n\r\n        </motion.div>\r\n      </div>\r\n      \r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"/students\" element={<StudentsPage />} />\r\n        <Route path=\"/login\" element={<LoginPage onLogin={handleLogin} />} />\r\n        {isLoggedInAdmin &&            (\r\n          <Route path=\"/admin\" element={<AdminPage onLogout={handleLogout} />} />\r\n        )}\r\n        {isLoggedInUser && id && (\r\n          <Route path=\"/user\" element={<UserPage userId={id} onLogout={handleLogout} />} />\r\n        )}\r\n      </Routes>\r\n\r\n\r\n    </Router>\r\n    \r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx",[],[],"C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx",[],[],"C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx",["40","41","42"],[],"// pages/AdminPage.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './HomePage.css';\r\nimport './AdminPage.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ntype Student = {\r\n  student_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  birth_date: string;\r\n  gender: string;\r\n  country_name: string;\r\n  country_id: number;\r\n  phone: string;\r\n  username: string;\r\n  password:string;\r\n  email: string;\r\n};\r\ntype Countries = {\r\n  country_id: number;\r\n  country_name: string;\r\n};\r\n\r\ntype SortConfig = {\r\n  key: keyof Student;\r\n  direction: 'ascending' | 'descending';\r\n};\r\n\r\ninterface AdminPageProps {\r\n  onLogout: () => void;\r\n};\r\n\r\nconst AdminPage: React.FC<AdminPageProps> = ({ onLogout }) => {\r\n  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'first_name', direction: 'ascending' });\r\n  // const [student, setStudent] = useState<Student>(selectedStudent);\r\n  const [rows, setRows] = useState<Student[]>([]);\r\n  const navigate = useNavigate();\r\n\r\n  const [students, setStudents] = useState<Student[]>([]);\r\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\r\n  //const [newStudent, setNewStudent] = useState({});\r\n  const [countries, setCountries] = useState<Countries[]>([]);\r\n  const [newStudent, setNewStudent] = useState<Student>({\r\n    student_id: 0,\r\n    first_name: '',\r\n    last_name: '',\r\n    birth_date: '',\r\n    gender: '',\r\n    country_id: 0,\r\n    country_name: '',\r\n    phone: '',\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n  });\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  const handleInputChange = (event:  React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    setNewStudent({\r\n      ...newStudent,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  \r\n// pages/AdminPage.tsx\r\n\r\nconst handleAddStudent = () => {\r\n  const csrftoken = getCookie('csrftoken'); // Получаем CSRF токен\r\n\r\n  axios.post('/api/data/addStudent/', newStudent, {\r\n    headers: {\r\n      'X-CSRFToken': csrftoken // Добавляем CSRF токен в заголовки запроса\r\n    }\r\n  })\r\n  .then(response => {\r\n    // Добавляем нового студента в состояние rows\r\n    // setRows([...rows, response.data]);\r\n    setShowForm(!showForm)\r\n    setNewStudent({\r\n      student_id: 0,\r\n      first_name: '',\r\n      last_name: '',\r\n      birth_date: '',\r\n      gender: '',\r\n      country_id: 0,\r\n      country_name: '',\r\n      phone: '',\r\n      username: '',\r\n      password: '',\r\n      email: '',\r\n    });\r\n  });\r\n};\r\n\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const filteredRows = rows.filter(\r\n    (row) =>\r\n      row.first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      row.last_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      row.phone.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      row.gender.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      row.country_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      row.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n      // добавьте здесь другие поля, по которым вы хотите фильтровать\r\n  );\r\n    \r\n  function getCookie(name: string): string | null {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n        const cookie = cookies[i].trim();\r\n        if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return cookieValue;\r\n  }\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    axios.get('/api/data/ollStudent/')\r\n      .then(response => {\r\n        setRows(response.data);\r\n        console.log(\"response.data\");\r\n        console.log(response.data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const sortArray = (type: keyof Student) => {\r\n      const sorted = [...rows].sort((a, b) => {\r\n        if (typeof a[type] === 'number' && typeof b[type] === 'number') {\r\n          return (a[type] as number) - (b[type] as number);\r\n        }\r\n        if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n          return (a[type] as string).localeCompare(b[type] as string);\r\n        }\r\n        return 0;\r\n      });\r\n      if (sortConfig.direction === 'descending') sorted.reverse();\r\n      return sorted;\r\n    };\r\n    if (sortConfig.key) {\r\n      const sortedData = sortArray(sortConfig.key);\r\n      setRows(sortedData);\r\n    }\r\n  }, [sortConfig]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/countries/')\r\n      .then(response => {\r\n        setCountries(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('There was an!', error);\r\n      });\r\n  }, []);\r\n\r\n  const requestSort = (key: keyof Student) => {\r\n    let direction: 'ascending' | 'descending' = 'ascending';\r\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  const buttonOnLogout = () => {\r\n    onLogout();\r\n    navigate('/');\r\n  }\r\n\r\n  const handleSelectStudent = (student: Student) => {\r\n    setSelectedStudent(student);\r\n  };\r\n\r\n  const handleCloseEditForm = () => {\r\n    setSelectedStudent(null);\r\n  };\r\n\r\n  const handleDeleteStudent = (studentId: number) => {\r\n\r\n    axios.post('/api/data/deleteStudent/' + studentId + '/')\r\n        .then(res => {\r\n            console.log(res.data);\r\n            // Обновляем состояние rows, удаляя студента с указанным ID\r\n            setRows(rows.filter(student => student.student_id !== studentId));\r\n            setSelectedStudent(null);\r\n        })\r\n        .catch(error => console.error(error));\r\n  };\r\n\r\n  const handleUpdateStudent = (student: Student) => {\r\n      axios.post('/api/data/updateStudent/' + student.student_id + '/', student)\r\n          .then(response => {\r\n              console.log(response.data);\r\n              // Обновляем состояние rows, заменяя обновленного студента\r\n              setRows(rows.map(row => row.student_id === student.student_id ? student : row));\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n          });\r\n  };\r\n  // const [student, setStudent] = useState<Student | null>(selectedStudent);\r\n\r\n  return (\r\n    <div>\r\n    <div className=\"Login-div\">\r\n      <button className=\"btn\" onClick={buttonOnLogout}>Logout</button>\r\n    </div>\r\n    <div className=\"home-page\">\r\n      <h1 className=\"home-page__title\">Страница администратора</h1>\r\n      <p className=\"home-page__info\">\r\n        Жители этого общажного ада.\r\n      </p>\r\n      <button className=\"btn\" onClick={() => setShowForm(!showForm)}>Добавить нового студента</button>\r\n      {showForm && (\r\n      <div className=\"add-student-form\">\r\n        <button className=\"btn close-btn\" onClick={() => setShowForm(!showForm)}>\r\n          X\r\n        </button>\r\n        <h2>Добавить нового студента</h2>\r\n          <input name=\"first_name\" value={newStudent.first_name} onChange={handleInputChange} placeholder=\"Имя\" />\r\n          <input name=\"last_name\" value={newStudent.last_name} onChange={handleInputChange} placeholder=\"Фамилия\" />\r\n          <input type=\"date\" name=\"birth_date\" value={newStudent.birth_date} onChange={handleInputChange} placeholder=\"День рождения\" />\r\n          <input name=\"gender\" value={newStudent.gender} onChange={handleInputChange} placeholder=\"Пол\" />\r\n          <select name=\"country_id\" value={newStudent.country_id} onChange={handleInputChange}>\r\n          {countries.map(country => (\r\n          <option key={country.country_id} value={country.country_id}>{country.country_name}</option>\r\n            ))}\r\n          </select>\r\n          <input name=\"phone\" value={newStudent.phone} onChange={handleInputChange} placeholder=\"Телефон\" />\r\n      <input name=\"email\" value={newStudent.email} onChange={handleInputChange} placeholder=\"Email\" />\r\n      {/* <button onClick={handleAddStudent}>Добавить студента</button> */}\r\n      <button className=\"btn\" onClick={handleAddStudent}>Добавить студента</button>\r\n      </div>\r\n      )}\r\n        {/* </div> */}\r\n        <input\r\n            type=\"text\"\r\n            placeholder=\"Поиск\"\r\n            value={searchTerm}\r\n            onChange={handleSearchChange}\r\n            style={{\r\n                padding: \"12px 20px\",\r\n                margin: \"8px 0\",\r\n                boxSizing: \"border-box\",\r\n                border: \"2px solid #ccc\",\r\n                borderRadius: \"4px\"\r\n            }}\r\n        />\r\n        <table>\r\n          <thead>\r\n          <tr>\r\n            <th onClick={() => requestSort('first_name')}>Имя</th>\r\n            <th onClick={() => requestSort('last_name')}>Фамилия</th>\r\n            {/* <th onClick={() => requestSort('birth_date')}>День рождения</th> */}\r\n            <th onClick={() => requestSort('email')}>Email</th>\r\n            <th onClick={() => requestSort('gender')}>Пол</th>\r\n            <th onClick={() => requestSort('country_name')}>Страна</th>\r\n            {/* <th onClick={() => requestSort('username')}>Логин</th> */}\r\n            {/* <th onClick={() => requestSort('password')}>Пароль</th> */}\r\n            <th onClick={() => requestSort('phone')}>Phone</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n            {filteredRows.map((row, index) => (\r\n              <tr key={index}>\r\n                <td>{row.first_name}</td>\r\n                <td>{row.last_name}</td>\r\n                {/* <td>{row.birth_date}</td> */}\r\n                <td>{row.email}</td>\r\n                <td>{row.gender}</td>\r\n                <td>{row.country_name}</td>\r\n                {/* <td>{row.username}</td> */}\r\n                {/* <td>{row.password}</td> */}\r\n                <td>{row.phone}</td>\r\n                <td>\r\n                  <button className=\"btn\" onClick={() => handleSelectStudent(row)}>Показать</button>\r\n                </td>\r\n\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        {selectedStudent && (\r\n      <div className=\"student-info\">\r\n        <h2>Информация о студенте</h2>\r\n\r\n        <div className=\"student-update\">\r\n        <label>\r\n          Имя:\r\n          <input type=\"text\" value={selectedStudent.first_name} onChange={e => setSelectedStudent({...selectedStudent, first_name: e.target.value})} />\r\n        </label>\r\n        <label>\r\n          Фамилия:\r\n          <input type=\"text\" value={selectedStudent.last_name} onChange={e => setSelectedStudent({...selectedStudent, last_name: e.target.value})} />\r\n        </label>\r\n        <label>\r\n          Email:\r\n          <input type=\"email\" value={selectedStudent.email} onChange={e => setSelectedStudent({...selectedStudent, email: e.target.value})} />\r\n        </label>\r\n        <label>\r\n          Пол:\r\n          <select value={selectedStudent.gender} onChange={e => setSelectedStudent({...selectedStudent, gender: e.target.value})}>\r\n            <option value=\"M\">Мужской</option>\r\n            <option value=\"F\">Женский</option>\r\n          </select>\r\n        </label>\r\n        <label>\r\n          Страна:\r\n          <input type=\"text\" value={selectedStudent.country_name} onChange={e => setSelectedStudent({...selectedStudent, country_name: e.target.value})} />\r\n        </label>\r\n        <label>\r\n          Телефон:\r\n          <input type=\"tel\" value={selectedStudent.phone} onChange={e => setSelectedStudent({...selectedStudent, phone: e.target.value})} />\r\n        </label>\r\n        <label>\r\n          Дата рождения:\r\n          <input type=\"date\" value={selectedStudent.birth_date} onChange={e => setSelectedStudent({...selectedStudent, birth_date: e.target.value})} />\r\n        </label>\r\n        <label>\r\n          Имя пользователя:\r\n          <input type=\"text\" value={selectedStudent.username} onChange={e => setSelectedStudent({...selectedStudent, username: e.target.value})} />\r\n        </label>\r\n        <label>\r\n          Пароль:\r\n          <input type=\"password\" value={selectedStudent.password} onChange={e => setSelectedStudent({...selectedStudent, password: e.target.value})} />\r\n        </label>\r\n        </div>\r\n        \r\n        <div>\r\n          <button className=\"btn\" onClick={() => handleDeleteStudent(selectedStudent.student_id)}>Удалить</button>\r\n          <button className=\"btn\" onClick={() => handleUpdateStudent(selectedStudent)}>Изменить</button>\r\n          <button className=\"btn\" onClick={() => handleCloseEditForm()}>Закрыть</button>\r\n        </div>\r\n\r\n      </div>\r\n    )}\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default AdminPage;\r\n","C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\pages\\StudentsPage.tsx",["43","44"],[],"C:\\GitHubProjectForever\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx",["45"],[],{"ruleId":"46","severity":1,"message":"47","line":3,"column":10,"nodeType":"48","messageId":"49","endLine":3,"endColumn":25},{"ruleId":"46","severity":1,"message":"50","line":41,"column":10,"nodeType":"48","messageId":"49","endLine":41,"endColumn":18},{"ruleId":"46","severity":1,"message":"51","line":41,"column":20,"nodeType":"48","messageId":"49","endLine":41,"endColumn":31},{"ruleId":"52","severity":1,"message":"53","line":159,"column":6,"nodeType":"54","endLine":159,"endColumn":18,"suggestions":"55"},{"ruleId":"46","severity":1,"message":"56","line":3,"column":10,"nodeType":"48","messageId":"49","endLine":3,"endColumn":14},{"ruleId":"52","severity":1,"message":"53","line":54,"column":6,"nodeType":"54","endLine":54,"endColumn":18,"suggestions":"57"},{"ruleId":"46","severity":1,"message":"56","line":2,"column":10,"nodeType":"48","messageId":"49","endLine":2,"endColumn":14},"@typescript-eslint/no-unused-vars","'AnimatePresence' is defined but never used.","Identifier","unusedVar","'students' is assigned a value but never used.","'setStudents' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rows'. Either include it or remove the dependency array.","ArrayExpression",["58"],"'Link' is defined but never used.",["59"],{"desc":"60","fix":"61"},{"desc":"60","fix":"62"},"Update the dependencies array to be: [rows, sortConfig]",{"range":"63","text":"64"},{"range":"65","text":"64"},[4691,4703],"[rows, sortConfig]",[1467,1479]]