[{"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\index.tsx":"1","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\App.tsx":"2","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx":"3","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx":"4","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx":"5","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\StudentsPage.tsx":"6","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx":"7","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminEditUserPage.tsx":"8"},{"size":437,"mtime":1688470862289,"results":"9","hashOfConfig":"10"},{"size":5245,"mtime":1689204991766,"results":"11","hashOfConfig":"10"},{"size":18990,"mtime":1689241519712,"results":"12","hashOfConfig":"10"},{"size":7671,"mtime":1689181204976,"results":"13","hashOfConfig":"10"},{"size":2509,"mtime":1688507574813,"results":"14","hashOfConfig":"10"},{"size":3349,"mtime":1689094778720,"results":"15","hashOfConfig":"10"},{"size":5012,"mtime":1689094778711,"results":"16","hashOfConfig":"10"},{"size":21482,"mtime":1689207228916,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16kuh62",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\index.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\App.tsx",["46"],[],"import { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\r\nimport { AnimatePresence, motion } from 'framer-motion';\r\nimport AdminPage from './pages/AdminPage';\r\nimport UserPage from './pages/UserPage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport HomePage from './pages/HomePage';\r\nimport StudentsPage from './pages/StudentsPage';\r\nimport AdminEditUserPage from './pages/AdminEditUserPage';\r\nimport logo from './images/logo.png';\r\nimport logo_min from './images/logo_min.png';\r\n\r\nconst App: React.FC = () => {\r\n  const [isLoggedInAdmin, setIsLoggedInAdmin] = useState(false);\r\n  const [isLoggedInUser, setIsLoggedInUser] = useState(false);\r\n  const [id, setId] = useState<number | null>(null);\r\n  \r\n\r\n  useEffect(() => {\r\n    const adminToken = localStorage.getItem('adminToken');\r\n    const userToken = localStorage.getItem('userToken');\r\n    if (adminToken) {\r\n      setIsLoggedInAdmin(true);\r\n    }\r\n    if (userToken) {\r\n      setIsLoggedInUser(true);\r\n      const userId = localStorage.getItem('userId');\r\n      if (userId) {\r\n        setId(Number(userId));\r\n      }\r\n    }\r\n  }, []);\r\n\r\n\r\n  const handleLogin = (type: boolean, id: number) => {\r\n    setId(id);\r\n    if (type){\r\n      setIsLoggedInAdmin(true);\r\n      localStorage.setItem('adminToken', 'your token');\r\n    } else{\r\n      setIsLoggedInUser(true);\r\n      localStorage.setItem('userToken', 'your token');\r\n      localStorage.setItem('userId', id.toString());\r\n    }\r\n  };\r\n\r\n\r\n  const handleLogout = () => {\r\n    setIsLoggedInAdmin(false);\r\n    setIsLoggedInUser(false);\r\n    setId(null);\r\n    localStorage.removeItem('adminToken');\r\n    localStorage.removeItem('userToken');\r\n    localStorage.removeItem('userId');\r\n  };\r\n\r\n\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const navVariants = {\r\n    open: { opacity: 1, x: 0 },\r\n    closed: { opacity: '50%', x: \"-90%\" },\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Router>\r\n      <div onMouseEnter={() => setIsHovered(true)} onMouseLeave={() => setIsHovered(false)}>\r\n        \r\n        <motion.div \r\n          style={{position: 'fixed', maxWidth: '15%', background: '#1f2932', height: '100%', zIndex: '9999'}}\r\n          initial=\"closed\"\r\n          animate={isHovered ? \"open\" : \"closed\"}\r\n          variants={navVariants}\r\n          transition={{ duration: 0.8 }}\r\n        >\r\n          <div style={{height: '100px'}}>\r\n          {isHovered ? (\r\n            <Link to=\"/\" style={{ color: '#fff', textDecoration: 'none' }}><motion.img \r\n            key=\"open\"\r\n            src={logo} \r\n            alt=\"Лого\" \r\n            style={{width: '100%', margin: '16px' }}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n          /></Link>\r\n           \r\n          ) : (\r\n            <motion.img \r\n              key=\"closed\"\r\n              src={logo_min} \r\n              alt=\"Лого\" \r\n              style={{width: '20%', margin: '16px 16px 16px 90%' }}\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              exit={{ opacity: 0 }}\r\n            />\r\n          )}\r\n          </div>\r\n          \r\n\r\n\r\n        <Link to=\"/\" style={{ color: '#fff', textDecoration: 'none' }}>Home</Link> <br/>\r\n        <Link to=\"/students\" style={{ color: '#fff', textDecoration: 'none' }}>дибылы</Link><br/>\r\n        \r\n        {!isLoggedInAdmin && !isLoggedInUser && (\r\n          <div>\r\n            <Link to=\"/login\" style={{ color: '#fff', textDecoration: 'none' }}>Войти</Link>\r\n          </div>\r\n        )}\r\n        {isLoggedInAdmin && (\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <Link to=\"/admin\" style={{ color: '#fff', textDecoration: 'none' }}>Админ-панель</Link> <div style={{ color: '#fff', textDecoration: 'none' }}> | </div>\r\n            <div onClick={() => handleLogout()} style={{ color: '#fff', textDecoration: 'none', cursor: 'pointer' }}>Выйти</div>\r\n          </div>\r\n        )}\r\n        {isLoggedInUser && id && (\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <Link to=\"/user\" style={{ color: '#fff', textDecoration: 'none' }}>Личный кабинет</Link> <div style={{ color: '#fff', textDecoration: 'none' }}> | </div>\r\n            <div onClick={() => handleLogout()} style={{ color: '#fff', textDecoration: 'none', cursor: 'pointer' }}>Выйти</div>\r\n          </div>\r\n        )}\r\n\r\n\r\n        </motion.div>\r\n      </div>\r\n      \r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"/students\" element={<StudentsPage />} />\r\n        <Route path=\"/login\" element={<LoginPage onLogin={handleLogin} />} />\r\n        {isLoggedInAdmin &&            (\r\n          <>\r\n            <Route path=\"/admin\" element={<AdminPage onLogout={handleLogout} />} />\r\n            <Route path=\"/admins/users/:idStudent/:idUser\" element={<AdminEditUserPage />} />\r\n          </>\r\n          \r\n          \r\n        )}\r\n        {isLoggedInUser && id && (\r\n          <Route path=\"/user\" element={<UserPage userId={id} onLogout={handleLogout} />} />\r\n        )}\r\n      </Routes>\r\n\r\n\r\n    </Router>\r\n    \r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminPage.tsx",["47","48","49","50","51"],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\UserPage.tsx",["52","53","54","55","56","57"],[],"import React, { useState, useEffect, ChangeEvent } from 'react';\r\nimport './UserPage.css';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Avatar, Button, Card, Divider, Form, Input, Select, Typography } from 'antd';\r\n\r\ntype User = {\r\n  student_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  birth_date: string;\r\n  gender: string;\r\n  country_name: string;\r\n  country_id: number;\r\n  phone: string;\r\n  username: string;\r\n  password:string;\r\n  email: string;\r\n  avatar: string;\r\n};\r\n\r\ntype Countries = {\r\n  country_id: number;\r\n  country_name: string;\r\n};\r\n\r\ninterface UserPageProps {\r\n  userId: number;\r\n  onLogout: () => void;\r\n}\r\n\r\n\r\nconst UserPage: React.FC<UserPageProps> = ({ userId, onLogout }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [editMode, setEditMode] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [countries, setCountries] = useState<Countries[]>([]);\r\n\r\n  useEffect(() => {\r\n    let countriesData: Countries[] = [];\r\n    let userData: User | null = null;\r\n    async function fetchData1() {\r\n      const response = await axios.get('/api/countries/');\r\n      setCountries(response.data);\r\n      countriesData = response.data;\r\n    }\r\n    async function fetchData2() {\r\n      const response = await axios.get(`/api/users/get/${userId}`);\r\n      setUser(response.data);\r\n      userData = response.data;\r\n    }\r\n    Promise.all([fetchData1(), fetchData2()]).then(() => {\r\n      setUser((prevUser) => ({ ...prevUser!, ['country_id']: countriesData.find(country => country.country_name === userData?.country_name)?.country_id || 0 }));\r\n    });\r\n  }, [userId]);\r\n\r\n  const handleLogout = () => {\r\n    onLogout();\r\n    navigate('/');\r\n  };\r\n\r\n  const handleEdit = () => { \r\n    setEditMode(true); \r\n  };\r\n\r\n  const handleSave = () => { \r\n    console.log(user);\r\n    axios.post(`/api/users/`, user, { \r\n      headers: { 'Content-Type': 'application/json', }, \r\n    }); \r\n    setEditMode(false); \r\n  };\r\n\r\n  const handleCancel = () => { \r\n    setEditMode(false); \r\n    let userData: User | null = null;\r\n    async function fetchData2() {\r\n      const response = await axios.get(`/api/users/get/${userId}`);\r\n      setUser(response.data);\r\n      userData = response.data;\r\n    }\r\n    Promise.all([fetchData2()]).then(() => {\r\n      setUser((prevUser) => ({ ...prevUser!, ['country_id']: countries.find(country => country.country_name === userData?.country_name)?.country_id || 0 }));\r\n    });\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setUser((prevUser) => ({ ...prevUser!, [name]: value }));\r\n  };\r\n  \r\n  // const handleSelectChange = (value: string) => {\r\n  //   setUser((prevUser) => ({ ...prevUser!, gender: value }));\r\n  // };\r\n  // const handleSelectChange1 = (value:{ value: number, label: string }, name: string) => {\r\n  //   setUser((prevUser) => ({ ...prevUser!, [name]: value.value }));\r\n  // };\r\n  const handleSelectChange1 = (country_id: number, name: string) => {\r\n    console.log(country_id);\r\n    setUser((prevUser) => ({ ...prevUser!, [name]: country_id }));\r\n    const country = countries.find(country => country.country_id === country_id);\r\n    if (country) {\r\n        setUser((prevUser) => ({ ...prevUser!, ['country_name']:  country.country_name}));\r\n    }\r\n  };\r\n  const handleSelectChange2 = (value: string, name: string) => {\r\n    setUser((prevUser) => ({ ...prevUser!, [name]: value }));\r\n  };\r\n\r\n  if (!user) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (!user) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    <div className=\"user-page\">\r\n      <Card className=\"user-card\">\r\n        <div className=\"user-avatar\">\r\n          <Avatar size={128} src={user.avatar} />\r\n        </div>\r\n        <div className=\"user-info\">\r\n          <Typography.Title level={3}>\r\n            {user.first_name} {user.last_name}\r\n          </Typography.Title>\r\n          <Typography.Paragraph>\r\n            Username: {user.username}\r\n          </Typography.Paragraph>\r\n          <Typography.Paragraph>\r\n            Email: {user.email}\r\n          </Typography.Paragraph>\r\n          <Typography.Paragraph>\r\n            Birth date: {user.birth_date}\r\n          </Typography.Paragraph>\r\n          <Typography.Paragraph>\r\n            Gender: {user.gender}\r\n          </Typography.Paragraph>\r\n          <Typography.Paragraph>\r\n            Country: {user.country_name}\r\n          </Typography.Paragraph>\r\n          <Typography.Paragraph>\r\n            Phone: {user.phone}\r\n          </Typography.Paragraph>\r\n          {editMode ? (\r\n            <Form layout=\"vertical\">\r\n              <Form.Item label=\"New password\">\r\n                <Input.Password\r\n                  name=\"password\"\r\n                  value={user.password}\r\n                  onChange={handleChange}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item label=\"First name\">\r\n                <Input\r\n                  name=\"first_name\"\r\n                  value={user.first_name}\r\n                  onChange={handleChange}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item label=\"Last name\">\r\n                <Input\r\n                  name=\"last_name\"\r\n                  value={user.last_name}\r\n                  onChange={handleChange}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item label=\"Birth date\">\r\n                <Input\r\n                  name=\"birth_date\"\r\n                  value={user.birth_date}\r\n                  onChange={handleChange}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item label=\"Gender\">\r\n                <Select\r\n                  // name=\"gender\"\r\n                  value={user.gender}\r\n                  onChange={(value) => handleSelectChange2(value, 'gender')}\r\n                >\r\n                  <Select.Option value=\"М\">Male</Select.Option>\r\n                  <Select.Option value=\"Ж\">Female</Select.Option>\r\n                  {/* <Select.Option value=\"other\">Other</Select.Option> */}\r\n                </Select>\r\n              </Form.Item>\r\n              <Form.Item label=\"Country\">\r\n              <Select\r\n                value={countries.find(country => country.country_name === user.country_name)?.country_id}\r\n                onChange={(value) => handleSelectChange1(value, 'country_id')}\r\n              >\r\n                {countries.map(country => (\r\n                  <Select.Option key={country.country_id} value={country.country_id}>\r\n                    {country.country_name}\r\n                  </Select.Option>\r\n                ))}\r\n              </Select>\r\n              </Form.Item>\r\n              <Form.Item label=\"Phone\">\r\n\r\n                <Input\r\n                  name=\"phone\"\r\n                  value={user.phone}\r\n                  onChange={handleChange}\r\n                />\r\n              </Form.Item>\r\n              <Button type=\"primary\" onClick={handleSave}>\r\n                Save changes\r\n              </Button>\r\n              <Button onClick={handleCancel}>Cancel</Button>\r\n            </Form>\r\n          ) : (\r\n            <>\r\n              <Button type=\"primary\" onClick={handleEdit}>\r\n                Edit profile\r\n              </Button>\r\n              {/* <Button onClick={handleChangePassword}>Change password</Button> */}\r\n            </>\r\n          )}\r\n          <Divider />\r\n          <Button type=\"primary\" onClick={handleLogout}>\r\n            Logout\r\n          </Button>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserPage;\r\n\r\n\r\n","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\LoginPage.tsx",[],[],"C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\StudentsPage.tsx",["58","59"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport './StudentsPage.css';\r\n\r\n\r\ntype Student = {\r\n  student_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  birth_date: string;\r\n  gender: string;\r\n  country_name: number;\r\n  // phone: string;\r\n  // email: string;\r\n};\r\n\r\ntype SortConfig = {\r\n  key: keyof Student;\r\n  direction: 'ascending' | 'descending';\r\n};\r\n\r\nconst StudentsPage: React.FC = () => {\r\n  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'first_name', direction: 'ascending' });\r\n  const [rows, setRows] = useState<Student[]>([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/data/')\r\n      .then(response => {\r\n        setRows(response.data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const sortArray = (type: keyof Student) => {\r\n      const sorted = [...rows].sort((a, b) => {\r\n        if (typeof a[type] === 'number' && typeof b[type] === 'number') {\r\n          return (a[type] as number) - (b[type] as number);\r\n        }\r\n        if (typeof a[type] === 'string' && typeof b[type] === 'string') {\r\n          return (a[type] as string).localeCompare(b[type] as string);\r\n        }\r\n        return 0;\r\n      });\r\n      if (sortConfig.direction === 'descending') sorted.reverse();\r\n      return sorted;\r\n    };\r\n    \r\n\r\n    if (sortConfig.key) {\r\n      const sortedData = sortArray(sortConfig.key);\r\n      setRows(sortedData);\r\n    }\r\n  }, [sortConfig]);\r\n\r\n  const requestSort = (key: keyof Student) => {\r\n    let direction: 'ascending' | 'descending' = 'ascending';\r\n    if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <div className=\"Login-div\">\r\n        <Link to=\"/login\" className=\"login-button\">Войти</Link>\r\n      </div> */}\r\n      <div className=\"students-page\">\r\n        <h1 className=\"students-page__title\">Добро пожаловать на главную страницу</h1>\r\n        <p className=\"students-page__info\">\r\n          Жители этого общажного ада.\r\n        </p>\r\n        <table>\r\n          <thead>\r\n          <tr>\r\n            <th onClick={() => requestSort('first_name')}>Имя</th>\r\n            <th onClick={() => requestSort('last_name')}>Фамилия</th>\r\n            <th onClick={() => requestSort('birth_date')}>День рождения</th>\r\n            {/* <th onClick={() => requestSort('email')}>Email</th> */}\r\n            <th onClick={() => requestSort('gender')}>Пол</th>\r\n            <th onClick={() => requestSort('country_name')}>Страна</th>\r\n            {/* <th onClick={() => requestSort('phone')}>Phone</th> */}\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows.map((row, index) => (\r\n              <tr key={index}>\r\n                <td>{row.first_name}</td>\r\n                <td>{row.last_name}</td>\r\n                <td>{row.birth_date}</td>\r\n                {/* <td>{row.email}</td> */}\r\n                <td>{row.gender}</td>\r\n                <td>{row.country_name}</td>\r\n                {/* <td>{row.phone}</td> */}\r\n\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentsPage;","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\HomePage.tsx",["60"],[],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './NewsFeed.css';\r\nimport HollImage from '../images/Holl.jpg';\r\nimport UpMoneyImage from '../images/UpMoney.jpg';\r\nimport ProgrammingCourseImage from '../images/ProgrammingCourseImage.jpg';\r\nimport SportsComplexImage from '../images/SportsComplexImage.jpg';\r\nimport CreativeFestivalImage from '../images/CreativeFestivalImage.jpg';\r\nimport InternshipOpportunitiesImage from '../images/InternshipOpportunitiesImage.jpg';\r\nimport ScientificResearchExhibitionImage from '../images/ScientificResearchExhibitionImage.jpg';\r\nimport OnlineCoursesImage from '../images/OnlineCoursesImage.jpg';\r\nconst newsData = [\r\n  {\r\n    id: 1,\r\n    title: 'Рим не сразу строился',\r\n    description: 'Важная новость для студентов! Общежитие, в котором проживают многие студенты, наконец-то претерпит капитальный ремонт.',\r\n    image: HollImage,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Чудеса случаются',\r\n    description: 'В рамках нового образовательного проекта, правительство объявило о значительном увеличении стипендий для студентов.',\r\n    image: UpMoneyImage,\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Новый курс по программированию',\r\n    description: 'Университет запускает новый курс по программированию, который позволит студентам освоить современные языки программирования и получить востребованные навыки для работы в IT-индустрии.',\r\n    image: ProgrammingCourseImage,\r\n  },\r\n  {\r\n    id: 4,\r\n    title: 'Открытие нового спортивного комплекса',\r\n    description: 'Университет открывает новый спортивный комплекс, оснащенный современным оборудованием. Студенты смогут заниматься спортом и поддерживать свое физическое здоровье в комфортных условиях.',\r\n    image: SportsComplexImage,\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Студенческий фестиваль творчества',\r\n    description: 'В университете пройдет студенческий фестиваль творчества, где студенты смогут показать свои таланты в различных областях: музыке, танцах, живописи и многое другое.',\r\n    image: CreativeFestivalImage,\r\n  },\r\n  {\r\n    id: 6,\r\n    title: 'Новые возможности для стажировок',\r\n    description: 'Университет заключил партнерство с ведущими компаниями, что открывает новые возможности для студентов по прохождению стажировок и получению практического опыта в своей области.',\r\n    image: InternshipOpportunitiesImage,\r\n  },\r\n  {\r\n    id: 7,\r\n    title: 'Выставка научных исследований',\r\n    description: 'В университете пройдет выставка научных исследований, где студенты смогут представить свои проекты и открытия в различных научных областях.',\r\n    image: ScientificResearchExhibitionImage,\r\n  },\r\n  {\r\n    id: 8,\r\n    title: 'Запуск онлайн-курсов для самообразования',\r\n    description: 'Университет запускает серию онлайн-курсов, которые позволят студентам самостоятельно изучать различные предметы и развивать свои навыки.',\r\n    image: OnlineCoursesImage,\r\n  },\r\n  // Добавьте другие новости в массив newsData\r\n];\r\n\r\n\r\nconst HomePage: React.FC = () => {\r\n    return (\r\n    <div\r\n        style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            // height у //',vh100 ':становите высоту по вашему усмотрению\r\n    }}>\r\n      <div className=\"news-feed\">\r\n      <h1>Новости</h1>\r\n      {newsData.map((news) => (\r\n        <div key={news.id} className=\"news-item\">\r\n          <img src={news.image} alt={news.title} />\r\n          <div className=\"news-content\">\r\n            <h2>{news.title}</h2>\r\n            <p>{news.description}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    <div>\r\n\r\n    </div>\r\n    </div>\r\n    \r\n    );\r\n    \r\n};\r\n\r\nexport default HomePage;","C:\\Users\\Kazinagg\\OneDrive\\BSU\\Practika\\Dorm_Manager2\\Dorm_Manager2\\myapp_react\\src\\pages\\AdminEditUserPage.tsx",["61","62","63","64","65","66","67","68","69"],[],{"ruleId":"70","severity":1,"message":"71","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":25},{"ruleId":"70","severity":1,"message":"74","line":70,"column":10,"nodeType":"72","messageId":"73","endLine":70,"endColumn":15},{"ruleId":"70","severity":1,"message":"75","line":71,"column":10,"nodeType":"72","messageId":"73","endLine":71,"endColumn":19},{"ruleId":"70","severity":1,"message":"76","line":71,"column":21,"nodeType":"72","messageId":"73","endLine":71,"endColumn":33},{"ruleId":"77","severity":1,"message":"78","line":184,"column":6,"nodeType":"79","endLine":184,"endColumn":18,"suggestions":"80"},{"ruleId":"70","severity":1,"message":"81","line":269,"column":9,"nodeType":"72","messageId":"73","endLine":269,"endColumn":33},{"ruleId":"70","severity":1,"message":"82","line":1,"column":38,"nodeType":"72","messageId":"73","endLine":1,"endColumn":49},{"ruleId":"70","severity":1,"message":"83","line":35,"column":10,"nodeType":"72","messageId":"73","endLine":35,"endColumn":21},{"ruleId":"70","severity":1,"message":"84","line":35,"column":23,"nodeType":"72","messageId":"73","endLine":35,"endColumn":37},{"ruleId":"85","severity":1,"message":"86","line":54,"column":46,"nodeType":"87","messageId":"88","endLine":54,"endColumn":157,"fix":"89"},{"ruleId":"85","severity":1,"message":"86","line":84,"column":46,"nodeType":"87","messageId":"88","endLine":84,"endColumn":153,"fix":"90"},{"ruleId":"85","severity":1,"message":"91","line":104,"column":48,"nodeType":"87","messageId":"88","endLine":104,"endColumn":87,"fix":"92"},{"ruleId":"70","severity":1,"message":"93","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":14},{"ruleId":"77","severity":1,"message":"78","line":54,"column":6,"nodeType":"79","endLine":54,"endColumn":18,"suggestions":"94"},{"ruleId":"70","severity":1,"message":"93","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":14},{"ruleId":"70","severity":1,"message":"95","line":4,"column":26,"nodeType":"72","messageId":"73","endLine":4,"endColumn":30},{"ruleId":"70","severity":1,"message":"96","line":4,"column":32,"nodeType":"72","messageId":"73","endLine":4,"endColumn":39},{"ruleId":"70","severity":1,"message":"97","line":16,"column":12,"nodeType":"72","messageId":"73","endLine":16,"endColumn":20},{"ruleId":"70","severity":1,"message":"98","line":18,"column":12,"nodeType":"72","messageId":"73","endLine":18,"endColumn":21},{"ruleId":"70","severity":1,"message":"99","line":168,"column":13,"nodeType":"72","messageId":"73","endLine":168,"endColumn":22},{"ruleId":"70","severity":1,"message":"74","line":173,"column":12,"nodeType":"72","messageId":"73","endLine":173,"endColumn":17},{"ruleId":"85","severity":1,"message":"86","line":192,"column":52,"nodeType":"87","messageId":"88","endLine":192,"endColumn":163,"fix":"100"},{"ruleId":"85","severity":1,"message":"86","line":228,"column":52,"nodeType":"87","messageId":"88","endLine":228,"endColumn":159,"fix":"101"},{"ruleId":"85","severity":1,"message":"91","line":247,"column":50,"nodeType":"87","messageId":"88","endLine":247,"endColumn":88,"fix":"102"},"@typescript-eslint/no-unused-vars","'AnimatePresence' is defined but never used.","Identifier","unusedVar","'rooms' is assigned a value but never used.","'residence' is assigned a value but never used.","'setResidence' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rows'. Either include it or remove the dependency array.","ArrayExpression",["103"],"'handleAddSelectResidence' is assigned a value but never used.","'ChangeEvent' is defined but never used.","'newPassword' is assigned a value but never used.","'setNewPassword' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['country_id'] found.","Property","unnecessarilyComputedProperty",{"range":"104","text":"105"},{"range":"106","text":"105"},"Unnecessarily computed property ['country_name'] found.",{"range":"107","text":"108"},"'Link' is defined but never used.",["109"],"'Card' is defined but never used.","'Divider' is defined but never used.","'students' is assigned a value but never used.","'studentId' is assigned a value but never used.","'idStudent' is assigned a value but never used.",{"range":"110","text":"105"},{"range":"111","text":"105"},{"range":"112","text":"108"},{"desc":"113","fix":"114"},[1579,1593],"'country_id'",[2427,2441],[3363,3379],"'country_name'",{"desc":"113","fix":"115"},[5777,5791],[6926,6940],[7780,7796],"Update the dependencies array to be: [rows, sortConfig]",{"range":"116","text":"117"},{"range":"118","text":"117"},[5476,5488],"[rows, sortConfig]",[1467,1479]]